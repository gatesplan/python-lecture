// Local Files Base URL (for localhost server)
const BASE_URL = 'problem-xmls/';

// URL Îß§Í∞úÎ≥ÄÏàòÏóêÏÑú config ÌååÏùºÎ™Ö Í∞ÄÏ†∏Ïò§Í∏∞
function getConfigFileName() {
    const urlParams = new URLSearchParams(window.location.search);
    const configParam = urlParams.get('config');
    return configParam ? `${configParam}.xml` : 'config.xml';
}

// 1. Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ìï®ÏàòÎì§
function loadConfig() {
    console.log('üîÑ Config Î°úÎî© ÏãúÏûë...');
    return new Promise((resolve, reject) => {
        try {
            const configFileName = getConfigFileName();
            const configUrl = BASE_URL + configFileName;
            console.log(`üì• ${configFileName} XMLHttpRequest ÏãúÎèÑ...`, configUrl);
            const xhr = new XMLHttpRequest();
            xhr.open('GET', configUrl, true);
            
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    console.log('üì° XMLHttpRequest ÏÉÅÌÉú:', xhr.status, xhr.statusText);
                    
                    if (xhr.status === 200 || xhr.status === 0) { // 0ÏùÄ Î°úÏª¨ ÌååÏùº
                        try {
                            console.log('üìÑ XML ÌÖçÏä§Ìä∏ ÏùΩÍ∏∞...');
                            const xmlText = xhr.responseText;
                            console.log('üìÑ XML ÎÇ¥Ïö© Í∏∏Ïù¥:', xmlText.length);
                            console.log('üìÑ XML ÎÇ¥Ïö© ÎØ∏Î¶¨Î≥¥Í∏∞:', xmlText.substring(0, 200));
                            
                            console.log('üîç XML ÌååÏã± ÏãúÏûë...');
                            const parser = new DOMParser();
                            const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
                            
                            // XML ÌååÏã± ÏóêÎü¨ Ï≤¥ÌÅ¨
                            const parseError = xmlDoc.querySelector('parsererror');
                            if (parseError) {
                                console.error('‚ùå XML ÌååÏã± ÏóêÎü¨:', parseError.textContent);
                                reject(new Error('XML ÌååÏã± Ïò§Î•ò: ' + parseError.textContent));
                                return;
                            }
                            
                            console.log('‚úÖ XML ÌååÏã± ÏÑ±Í≥µ');
                            
                            // XMLÏùÑ JSON ÌòïÌÉúÎ°ú Î≥ÄÌôò
                            console.log('üîÑ Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏãúÏûë...');
                            const titleElement = xmlDoc.querySelector('title');
                            console.log('üìù Title ÏöîÏÜå:', titleElement);
                            const title = titleElement ? titleElement.textContent : 'No Title';
                            console.log('üìù Ï∂îÏ∂úÎêú Title:', title);
                            
                            // ÏÑ§Ï†ï Ï†ïÎ≥¥ Ï∂îÏ∂ú
                            const settingsElement = xmlDoc.querySelector('settings');
                            const showSolutions = settingsElement ? 
                                settingsElement.querySelector('showSolutions')?.textContent === 'true' : true;
                            console.log('‚öôÔ∏è Ìï¥ÏÑ§ ÌëúÏãú ÏÑ§Ï†ï:', showSolutions);
                            
                            const sectionElements = xmlDoc.querySelectorAll('section');
                            console.log('üìÇ Section ÏöîÏÜåÎì§:', sectionElements.length, 'Í∞ú');
                            
                            const sections = Array.from(sectionElements).map((section, index) => {
                                const sectionData = {
                                    title: section.getAttribute('title'),
                                    file: section.getAttribute('file'),
                                    count: parseInt(section.getAttribute('count'))
                                };
                                console.log(`üìÇ Section ${index + 1}:`, sectionData);
                                return sectionData;
                            });
                            
                            const result = { title, sections, showSolutions };
                            console.log('‚úÖ Config Î°úÎî© ÏôÑÎ£å:', result);
                            resolve(result);
                        } catch (parseError) {
                            console.error('‚ùå XML Ï≤òÎ¶¨ Ïò§Î•ò:', parseError);
                            reject(parseError);
                        }
                    } else {
                        const error = new Error(`Config ÌååÏùº Î°úÎî© Ïã§Ìå®: ${xhr.status}`);
                        console.error('‚ùå XMLHttpRequest Ïã§Ìå®:', error);
                        reject(error);
                    }
                }
            };
            
            xhr.onerror = function() {
                const error = new Error('XMLHttpRequest ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò');
                console.error('‚ùå XMLHttpRequest ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò:', error);
                reject(error);
            };
            
            xhr.send();
        } catch (error) {
            console.error('‚ùå Config Î°úÎî© Ïò§Î•ò:', error);
            reject(error);
        }
    });
}

function loadProblems(filename) {
    console.log(`üîÑ Î¨∏Ï†ú ÌååÏùº Î°úÎî© ÏãúÏûë: ${filename}`);
    return new Promise((resolve, reject) => {
        try {
            const problemUrl = BASE_URL + filename;
            console.log(`üì• ${filename} XMLHttpRequest ÏãúÎèÑ...`, problemUrl);
            const xhr = new XMLHttpRequest();
            xhr.open('GET', problemUrl, true);
            
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    console.log(`üì° XMLHttpRequest ÏÉÅÌÉú (${filename}):`, xhr.status, xhr.statusText);
                    
                    if (xhr.status === 200 || xhr.status === 0) { // 0ÏùÄ Î°úÏª¨ ÌååÏùº
                        try {
                            console.log(`üìÑ XML ÌÖçÏä§Ìä∏ ÏùΩÍ∏∞ (${filename})...`);
                            const xmlText = xhr.responseText;
                            console.log(`üìÑ XML ÎÇ¥Ïö© Í∏∏Ïù¥ (${filename}):`, xmlText.length);
                            
                            console.log(`üîç XML ÌååÏã± ÏãúÏûë (${filename})...`);
                            const parser = new DOMParser();
                            const xmlDoc = parser.parseFromString(xmlText, 'text/xml');
                            
                            // XML ÌååÏã± ÏóêÎü¨ Ï≤¥ÌÅ¨
                            const parseError = xmlDoc.querySelector('parsererror');
                            if (parseError) {
                                console.error(`‚ùå XML ÌååÏã± ÏóêÎü¨ (${filename}):`, parseError.textContent);
                                reject(new Error('XML ÌååÏã± Ïò§Î•ò: ' + parseError.textContent));
                                return;
                            }
                            
                            console.log(`‚úÖ XML ÌååÏã± ÏÑ±Í≥µ (${filename})`);
                            
                            // XMLÏóêÏÑú Î¨∏Ï†úÎì§ÏùÑ Ï∂îÏ∂úÌïòÏó¨ Î∞∞Ïó¥Î°ú Î≥ÄÌôò
                            console.log(`üîÑ Î¨∏Ï†ú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú ÏãúÏûë (${filename})...`);
                            const problemElements = xmlDoc.querySelectorAll('problem');
                            console.log(`üß© Î¨∏Ï†ú Í∞úÏàò (${filename}):`, problemElements.length);
                            
                            const problems = Array.from(problemElements).map((problem, index) => {
                                console.log(`üîç Î¨∏Ï†ú ${index + 1} Ï≤òÎ¶¨ Ï§ë...`);
                                const problemData = {
                                    description: problem.querySelector('description')?.textContent || '',
                                    code: problem.querySelector('code')?.textContent || null,
                                    input: problem.querySelector('input')?.textContent || null,
                                    output: problem.querySelector('output')?.textContent || null,
                                    hint: problem.querySelector('hint')?.textContent || null,
                                    solution: problem.querySelector('solution')?.textContent || null
                                };
                                console.log(`üß© Î¨∏Ï†ú ${index + 1} Îç∞Ïù¥ÌÑ∞:`, {
                                    description: problemData.description.substring(0, 50) + '...',
                                    hasCode: !!problemData.code,
                                    hasInput: !!problemData.input,
                                    hasOutput: !!problemData.output,
                                    hasHint: !!problemData.hint,
                                    hasSolution: !!problemData.solution
                                });
                                return problemData;
                            });
                            
                            console.log(`‚úÖ Î¨∏Ï†ú ÌååÏùº Î°úÎî© ÏôÑÎ£å (${filename}):`, problems.length, 'Í∞ú');
                            resolve(problems);
                        } catch (parseError) {
                            console.error(`‚ùå XML Ï≤òÎ¶¨ Ïò§Î•ò (${filename}):`, parseError);
                            reject(parseError);
                        }
                    } else {
                        const error = new Error(`Î¨∏Ï†ú ÌååÏùº Î°úÎî© Ïã§Ìå®: ${filename} (${xhr.status})`);
                        console.error(`‚ùå XMLHttpRequest Ïã§Ìå® (${filename}):`, error);
                        reject(error);
                    }
                }
            };
            
            xhr.onerror = function() {
                const error = new Error(`XMLHttpRequest ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: ${filename}`);
                console.error(`‚ùå XMLHttpRequest ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò (${filename}):`, error);
                reject(error);
            };
            
            xhr.send();
        } catch (error) {
            console.error(`‚ùå Î¨∏Ï†ú ÌååÏùº Î°úÎî© Ïò§Î•ò (${filename}):`, error);
            reject(error);
        }
    });
}

// 2. Î¨∏Ï†ú Ï≤òÎ¶¨ Ìï®ÏàòÎì§
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

function selectRandomProblems(problems, count) {
    if (problems.length <= count) {
        return problems;
    }
    return shuffleArray(problems).slice(0, count);
}

// 3. HTML Î†åÎçîÎßÅ Ìï®ÏàòÎì§
function renderProblem(problem, number, showSolutions = true) {
    let html = `<div class="problem">`;
    html += `<div class="problem-header"><span class="problem-number">${number}. </span>${problem.description}</div>`;
    
    if (problem.code) {
        html += `<div class="code-block">${problem.code}</div>`;
    }
    
    if (problem.input) {
        html += `<div class="input-example">${problem.input}</div>`;
    }
    
    if (problem.output) {
        html += `<div class="output-example">${problem.output}</div>`;
    }
    
    if (problem.hint) {
        html += `<div class="hint">${problem.hint}</div>`;
    }
    
    if (problem.solution && showSolutions) {
        html += `<div class="solution">${problem.solution}</div>`;
    }
    
    html += `</div>`;
    return html;
}

function renderSection(title, problems, startNumber, showSolutions = true) {
    let html = `<h2>${title}</h2>`;
    problems.forEach((problem, index) => {
        html += renderProblem(problem, startNumber + index, showSolutions);
    });
    return html;
}

function renderDocument(config, allProblems) {
    const titleElement = document.getElementById('main-title');
    const contentElement = document.getElementById('content');
    
    titleElement.textContent = config.title;
    
    let html = '';
    let problemNumber = 1;
    
    config.sections.forEach(section => {
        const sectionProblems = allProblems[section.file] || [];
        const selectedProblems = selectRandomProblems(sectionProblems, section.count);
        
        html += renderSection(section.title, selectedProblems, problemNumber, config.showSolutions);
        problemNumber += selectedProblems.length;
    });
    
    contentElement.innerHTML = html;
}

// 4. Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
async function init() {
    console.log('üöÄ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî ÏãúÏûë...');
    try {
        console.log('‚öôÔ∏è Config Î°úÎî© Ï§ë...');
        const config = await loadConfig();
        console.log('‚úÖ Config Î°úÎî© ÏÑ±Í≥µ:', config);
        
        const allProblems = {};
        
        console.log('üìö Î¨∏Ï†ú ÌååÏùºÎì§ Î°úÎî© ÏãúÏûë...');
        // Î™®Îì† Î¨∏Ï†ú ÌååÏùº Î≥ëÎ†¨ Î°úÎî©
        const loadPromises = config.sections.map(async section => {
            console.log(`üìñ Î°úÎî© Ï§ë: ${section.file}`);
            allProblems[section.file] = await loadProblems(section.file);
            console.log(`‚úÖ ÏôÑÎ£å: ${section.file}`);
        });
        
        await Promise.all(loadPromises);
        console.log('‚úÖ Î™®Îì† Î¨∏Ï†ú ÌååÏùº Î°úÎî© ÏôÑÎ£å:', Object.keys(allProblems));
        
        // Î¨∏ÏÑú Î†åÎçîÎßÅ
        console.log('üé® Î¨∏ÏÑú Î†åÎçîÎßÅ ÏãúÏûë...');
        renderDocument(config, allProblems);
        console.log('üéâ Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò Ï¥àÍ∏∞Ìôî ÏôÑÎ£å!');
        
    } catch (error) {
        console.error('‚ùå Ï¥àÍ∏∞Ìôî Ïò§Î•ò:', error);
        console.error('‚ùå Ïò§Î•ò Ïä§ÌÉù:', error.stack);
        document.getElementById('main-title').textContent = 'Ïò§Î•ò Î∞úÏÉù';
        document.getElementById('content').innerHTML = 
            `<div style="color: red; padding: 20px; border: 1px solid red;">
                <h3>ÌååÏùº Î°úÎî© Ïò§Î•ò</h3>
                <p><strong>Ïò§Î•ò Î©îÏãúÏßÄ:</strong> ${error.message}</p>
                <p><strong>Í∞ÄÎä•Ìïú ÏõêÏù∏:</strong></p>
                <ul>
                    <li>Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÌååÏùºÏùÑ ÏßÅÏ†ë Ïó¥ÏóàÏùÑ Îïå CORS Ï†ïÏ±ÖÏúºÎ°ú Ïù∏Ìïú Ï∞®Îã®</li>
                    <li>XML ÌååÏùºÏù¥ Ï°¥Ïû¨ÌïòÏßÄ ÏïäÍ±∞ÎÇò Í≤ΩÎ°úÍ∞Ä ÏûòÎ™ªÎê®</li>
                    <li>XML ÌååÏùºÏùò Î¨∏Î≤ï Ïò§Î•ò</li>
                </ul>
                <p><strong>Ìï¥Í≤∞ Î∞©Î≤ï:</strong> Î∏åÎùºÏö∞Ï†Ä Í∞úÎ∞úÏûê ÎèÑÍµ¨(F12)Ïùò Console ÌÉ≠ÏóêÏÑú ÏûêÏÑ∏Ìïú Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.</p>
            </div>`;
    }
}

// ÌéòÏù¥ÏßÄ Î°úÎìú ÌõÑ Ïã§Ìñâ
document.addEventListener('DOMContentLoaded', init);