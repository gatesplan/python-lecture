<?xml version="1.0" encoding="UTF-8"?>
<problems>
  <problem>
    <description>가변 개수의 숫자들을 받아서 모든 수의 합을 반환하는 함수를 작성하세요. 함수명은 'sum_all'이고 *args를 사용하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[30]]></output>
    <hint>*args를 사용하면 여러 개의 위치 인자를 튜플로 받을 수 있습니다.</hint>
    <solution><![CDATA[# *args를 사용한 합계 함수
def sum_all(*numbers):
    total = 0
    for num in numbers:
        total += num
    return total

result = sum_all(5, 10, 15)
print(result)]]></solution>
  </problem>
  
  <problem>
    <description>가변 개수의 문자열들을 받아서 모두 연결한 결과를 반환하는 함수를 작성하세요. 함수명은 'concat_strings'이고 *args를 사용하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[HelloWorldPython]]></output>
    <hint>문자열들을 for문으로 순회하면서 연결하세요.</hint>
    <solution><![CDATA[# *args를 사용한 문자열 연결 함수
def concat_strings(*strings):
    result = ""
    for string in strings:
        result += string
    return result

result = concat_strings("Hello", "World", "Python")
print(result)]]></solution>
  </problem>
  
  <problem>
    <description>가변 개수의 키워드 인자를 받아서 프로필 정보를 생성하는 함수를 작성하세요. 함수명은 'create_profile'이고 **kwargs를 사용하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[name: 김철수
age: 25
city: 서울]]></output>
    <hint>**kwargs는 딕셔너리 형태로 키워드 인자들을 받습니다.</hint>
    <solution><![CDATA[# **kwargs를 사용한 프로필 생성 함수
def create_profile(**info):
    result = ""
    for key, value in info.items():
        result += f"{key}: {value}\n"
    return result.strip()

profile = create_profile(name="김철수", age=25, city="서울")
print(profile)]]></solution>
  </problem>
  
  <problem>
    <description>필수 매개변수와 *args를 함께 사용하는 함수를 작성하세요. 첫 번째 인자는 연산자(+, -, *, /)이고 나머지는 숫자들입니다. 함수명은 'calculate'입니다.</description>
    <code></code>
    <input></input>
    <output><![CDATA[60]]></output>
    <hint>첫 번째 매개변수로 연산자를 받고, *args로 숫자들을 받아서 계산하세요.</hint>
    <solution><![CDATA[# 필수 매개변수와 *args를 함께 사용
def calculate(operator, *numbers):
    if operator == "+":
        return sum(numbers)
    elif operator == "*":
        result = 1
        for num in numbers:
            result *= num
        return result

result = calculate("*", 3, 4, 5)
print(result)]]></solution>
  </problem>
  
  <problem>
    <description>로그 메시지를 출력하는 함수를 작성하세요. 레벨과 메시지는 필수이고, *details로 추가 정보를, **metadata로 메타데이터를 받습니다. 함수명은 'log_message'입니다.</description>
    <code></code>
    <input></input>
    <output><![CDATA[ERROR: 오류 발생
Details: 파일 없음, 권한 오류
Metadata: timestamp=14:30, user=admin]]></output>
    <hint>일반 매개변수, *args, **kwargs를 모두 조합해서 사용하세요.</hint>
    <solution><![CDATA[# 복합 매개변수 사용 함수
def log_message(level, message, *details, **metadata):
    result = f"{level}: {message}"
    if details:
        result += f"\nDetails: {', '.join(details)}"
    if metadata:
        meta_info = ', '.join([f"{k}={v}" for k, v in metadata.items()])
        result += f"\nMetadata: {meta_info}"
    return result

log = log_message("ERROR", "오류 발생", "파일 없음", "권한 오류", timestamp="14:30", user="admin")
print(log)]]></solution>
  </problem>
  
  <problem>
    <description>가변 개수의 숫자들 중에서 최댓값을 찾는 함수를 작성하세요. 함수명은 'find_maximum'이고 *args를 사용하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[45]]></output>
    <hint>max() 함수를 사용하거나 반복문으로 최댓값을 찾으세요.</hint>
    <solution><![CDATA[# *args를 사용한 최댓값 찾기 함수
def find_maximum(*numbers):
    return max(numbers)

result = find_maximum(12, 45, 23, 8, 37)
print(result)]]></solution>
  </problem>
  
  <problem>
    <description>상품 정보를 생성하는 함수를 작성하세요. 상품명은 필수이고, **kwargs로 가격, 카테고리, 재고 등을 받습니다. 함수명은 'create_product'입니다.</description>
    <code></code>
    <input></input>
    <output><![CDATA[상품: 노트북 (가격: 1000000, 카테고리: 전자제품, 재고: 5)]]></output>
    <hint>첫 번째는 일반 매개변수, 나머지는 **kwargs로 받아서 처리하세요.</hint>
    <solution><![CDATA[# 일반 매개변수와 **kwargs 조합
def create_product(name, **details):
    result = f"상품: {name}"
    if details:
        detail_info = ', '.join([f"{k}: {v}" for k, v in details.items()])
        result += f" ({detail_info})"
    return result

product = create_product("노트북", 가격=1000000, 카테고리="전자제품", 재고=5)
print(product)]]></solution>
  </problem>
  
  <problem>
    <description>가변 개수의 리스트들을 받아서 모든 요소를 하나의 리스트로 합치는 함수를 작성하세요. 함수명은 'merge_all_lists'이고 *args를 사용하세요.</description>
    <code><![CDATA[list1 = [1, 2]
list2 = [3, 4]
list3 = [5, 6]]]></code>
    <input></input>
    <output><![CDATA[[1, 2, 3, 4, 5, 6]]]></output>
    <hint>각 리스트를 순회하면서 모든 요소를 새 리스트에 추가하세요.</hint>
    <solution><![CDATA[# *args를 사용한 리스트 합치기 함수
def merge_all_lists(*lists):
    result = []
    for lst in lists:
        result.extend(lst)
    return result

list1 = [1, 2]
list2 = [3, 4]
list3 = [5, 6]
merged = merge_all_lists(list1, list2, list3)
print(merged)]]></solution>
  </problem>
  
  <problem>
    <description>함수 호출 정보를 기록하는 함수를 작성하세요. 함수명은 필수이고, *args로 인자들을, **kwargs로 키워드 인자들을 받습니다. 함수명은 'record_call'입니다.</description>
    <code></code>
    <input></input>
    <output><![CDATA[Function: calculate
Args: (10, 20)
Kwargs: {'operation': 'add', 'debug': True}]]></output>
    <hint>함수명, args, kwargs를 각각 출력하세요.</hint>
    <solution><![CDATA[# 함수 호출 기록 함수
def record_call(func_name, *args, **kwargs):
    result = f"Function: {func_name}"
    result += f"\nArgs: {args}"
    result += f"\nKwargs: {kwargs}"
    return result

call_info = record_call("calculate", 10, 20, operation="add", debug=True)
print(call_info)]]></solution>
  </problem>
  
  <problem>
    <description>가변 개수의 점수들을 받아서 통계 정보를 딕셔너리로 반환하는 함수를 작성하세요. 함수명은 'analyze_scores'이고 *args를 사용하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[{'count': 5, 'total': 425, 'average': 85.0, 'max': 95, 'min': 72}]]></output>
    <hint>점수들의 개수, 합계, 평균, 최댓값, 최솟값을 계산해서 딕셔너리로 반환하세요.</hint>
    <solution><![CDATA[# *args를 사용한 점수 분석 함수
def analyze_scores(*scores):
    return {
        'count': len(scores),
        'total': sum(scores),
        'average': sum(scores) / len(scores),
        'max': max(scores),
        'min': min(scores)
    }

stats = analyze_scores(85, 92, 78, 95, 72)
print(stats)]]></solution>
  </problem>
</problems>