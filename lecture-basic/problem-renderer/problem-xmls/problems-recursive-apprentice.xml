<?xml version="1.0" encoding="UTF-8"?>
<!--
  재귀함수 기초 연습 문제 - Apprentice 레벨
  
  이 파일은 재귀함수 개념을 처음 배우는 초심자를 위한 문제들입니다.
  각 문제는 명확한 기저 조건과 단일 재귀 호출 구조를 가집니다.
  
  학습 목표:
  - 재귀함수의 기본 구조 (기저 조건 + 재귀 호출) 이해
  - 다양한 상황에서 재귀 패턴 적용 연습
  - 재귀 호출 순서(전위/후위)의 차이 이해
-->
<problems>

  <!-- =========================== 기본 수학 계산 =========================== -->
  
  <!-- 1. 팩토리얼 계산 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 n!(팩토리얼)을 계산하는 함수를 작성하세요.
팩토리얼은 n! = n × (n-1) × (n-2) × ... × 1 입니다.
예: 5! = 5 × 4 × 3 × 2 × 1 = 120]]></description>
    <code><![CDATA[def factorial(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(factorial(5))  # 120이 나와야 합니다]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[120]]></output>
    <hint><![CDATA[기저 조건: n이 0 또는 1일 때는 1을 반환합니다. 재귀 호출: n * factorial(n-1)을 반환합니다.]]></hint>
    <solution><![CDATA[def factorial(n):
    # 기저 조건: n이 0 또는 1이면 1 반환
    if n <= 1:
        return 1
    # 재귀 호출: n * (n-1)!
    return n * factorial(n - 1)

# 동작 과정 예시:
# factorial(5) = 5 * factorial(4)
#              = 5 * 4 * factorial(3)
#              = 5 * 4 * 3 * factorial(2)
#              = 5 * 4 * 3 * 2 * factorial(1)
#              = 5 * 4 * 3 * 2 * 1
#              = 120]]></solution>
  </problem>

  <!-- 2. 거듭제곱 계산 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 a의 n제곱(a^n)을 계산하는 함수를 작성하세요.
거듭제곱은 a^n = a × a × ... × a (n번 곱하기) 입니다.
예: 2^4 = 2 × 2 × 2 × 2 = 16]]></description>
    <code><![CDATA[def power(a, n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(power(2, 4))  # 16이 나와야 합니다
print(power(3, 3))  # 27이 나와야 합니다]]></code>
    <input><![CDATA[a = 2, n = 4]]></input>
    <output><![CDATA[16]]></output>
    <hint><![CDATA[기저 조건: n이 0이면 1을 반환합니다. 재귀 호출: a * power(a, n-1)을 반환합니다.]]></hint>
    <solution><![CDATA[def power(a, n):
    # 기저 조건: a^0 = 1
    if n == 0:
        return 1
    # 재귀 호출: a * a^(n-1)
    return a * power(a, n - 1)

# 동작 과정 예시:
# power(2, 4) = 2 * power(2, 3)
#             = 2 * 2 * power(2, 2)
#             = 2 * 2 * 2 * power(2, 1)
#             = 2 * 2 * 2 * 2 * power(2, 0)
#             = 2 * 2 * 2 * 2 * 1
#             = 16]]></solution>
  </problem>

  <!-- 3. 1부터 n까지의 합 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 1부터 n까지의 합을 계산하는 함수를 작성하세요.
합은 1 + 2 + 3 + ... + n 입니다.
예: n=5일 때 1+2+3+4+5 = 15]]></description>
    <code><![CDATA[def sum_to_n(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(sum_to_n(5))  # 15가 나와야 합니다
print(sum_to_n(10)) # 55가 나와야 합니다]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[15]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 0을 반환합니다. 재귀 호출: n + sum_to_n(n-1)을 반환합니다.]]></hint>
    <solution><![CDATA[def sum_to_n(n):
    # 기저 조건: n이 0 이하이면 0 반환
    if n <= 0:
        return 0
    # 재귀 호출: n + (1부터 n-1까지의 합)
    return n + sum_to_n(n - 1)

# 동작 과정 예시:
# sum_to_n(5) = 5 + sum_to_n(4)
#             = 5 + 4 + sum_to_n(3)
#             = 5 + 4 + 3 + sum_to_n(2)
#             = 5 + 4 + 3 + 2 + sum_to_n(1)
#             = 5 + 4 + 3 + 2 + 1 + sum_to_n(0)
#             = 5 + 4 + 3 + 2 + 1 + 0
#             = 15]]></solution>
  </problem>

  <!-- 4. 제곱수의 합 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 1²부터 n²까지의 합을 계산하는 함수를 작성하세요.
제곱수의 합은 1² + 2² + 3² + ... + n² 입니다.
예: n=4일 때 1²+2²+3²+4² = 1+4+9+16 = 30]]></description>
    <code><![CDATA[def sum_of_squares(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(sum_of_squares(4))  # 30이 나와야 합니다
print(sum_of_squares(3))  # 14가 나와야 합니다]]></code>
    <input><![CDATA[4]]></input>
    <output><![CDATA[30]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 0을 반환합니다. 재귀 호출: n*n + sum_of_squares(n-1)을 반환합니다.]]></hint>
    <solution><![CDATA[def sum_of_squares(n):
    # 기저 조건: n이 0 이하이면 0 반환
    if n <= 0:
        return 0
    # 재귀 호출: n² + (1²부터 (n-1)²까지의 합)
    return n * n + sum_of_squares(n - 1)

# 동작 과정 예시:
# sum_of_squares(4) = 4² + sum_of_squares(3)
#                   = 16 + 3² + sum_of_squares(2)
#                   = 16 + 9 + 2² + sum_of_squares(1)
#                   = 16 + 9 + 4 + 1² + sum_of_squares(0)
#                   = 16 + 9 + 4 + 1 + 0
#                   = 30]]></solution>
  </problem>

  <!-- 5. 각 자릿수의 합 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 주어진 양의 정수의 각 자릿수를 모두 더한 값을 계산하는 함수를 작성하세요.
예: 1234의 경우 1+2+3+4 = 10]]></description>
    <code><![CDATA[def sum_of_digits(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(sum_of_digits(1234))  # 10이 나와야 합니다
print(sum_of_digits(987))   # 24가 나와야 합니다]]></code>
    <input><![CDATA[1234]]></input>
    <output><![CDATA[10]]></output>
    <hint><![CDATA[기저 조건: n이 0이면 0을 반환합니다. 재귀 호출: (n%10) + sum_of_digits(n//10)을 반환합니다. n%10은 마지막 자릿수, n//10은 마지막 자릿수를 제거한 숫자입니다.]]></hint>
    <solution><![CDATA[def sum_of_digits(n):
    # 기저 조건: n이 0이면 0 반환
    if n == 0:
        return 0
    # 재귀 호출: 마지막 자릿수 + 나머지 자릿수들의 합
    return (n % 10) + sum_of_digits(n // 10)

# 동작 과정 예시:
# sum_of_digits(1234) = 4 + sum_of_digits(123)
#                     = 4 + 3 + sum_of_digits(12)
#                     = 4 + 3 + 2 + sum_of_digits(1)
#                     = 4 + 3 + 2 + 1 + sum_of_digits(0)
#                     = 4 + 3 + 2 + 1 + 0
#                     = 10]]></solution>
  </problem>

  <!-- 6. 각 자릿수의 곱 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 주어진 양의 정수의 각 자릿수를 모두 곱한 값을 계산하는 함수를 작성하세요.
예: 1234의 경우 1×2×3×4 = 24]]></description>
    <code><![CDATA[def product_of_digits(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(product_of_digits(1234))  # 24가 나와야 합니다
print(product_of_digits(567))   # 210이 나와야 합니다]]></code>
    <input><![CDATA[1234]]></input>
    <output><![CDATA[24]]></output>
    <hint><![CDATA[기저 조건: n이 0이면 1을 반환합니다. 재귀 호출: (n%10) * product_of_digits(n//10)을 반환합니다.]]></hint>
    <solution><![CDATA[def product_of_digits(n):
    # 기저 조건: n이 0이면 1 반환 (곱셈의 항등원)
    if n == 0:
        return 1
    # 재귀 호출: 마지막 자릿수 × 나머지 자릿수들의 곱
    return (n % 10) * product_of_digits(n // 10)

# 동작 과정 예시:
# product_of_digits(1234) = 4 × product_of_digits(123)
#                         = 4 × 3 × product_of_digits(12)
#                         = 4 × 3 × 2 × product_of_digits(1)
#                         = 4 × 3 × 2 × 1 × product_of_digits(0)
#                         = 4 × 3 × 2 × 1 × 1
#                         = 24]]></solution>
  </problem>

  <!-- =========================== 출력 패턴 =========================== -->

  <!-- 7. 카운트다운 출력 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 n부터 1까지 카운트다운하며 출력하는 함수를 작성하세요.
예: n=5일 때 5, 4, 3, 2, 1을 각각 한 줄씩 출력]]></description>
    <code><![CDATA[def countdown(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
countdown(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[5
4
3
2
1]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 종료합니다. 먼저 n을 출력한 다음, countdown(n-1)을 호출합니다.]]></hint>
    <solution><![CDATA[def countdown(n):
    # 기저 조건: n이 0 이하이면 종료
    if n <= 0:
        return
    # 현재 숫자를 출력
    print(n)
    # 재귀 호출: n-1부터 카운트다운
    countdown(n - 1)

# 동작 과정:
# countdown(5): print(5) → countdown(4)
# countdown(4): print(4) → countdown(3)
# countdown(3): print(3) → countdown(2)
# countdown(2): print(2) → countdown(1)
# countdown(1): print(1) → countdown(0)
# countdown(0): 종료]]></solution>
  </problem>

  <!-- 8. 카운트업 출력 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 1부터 n까지 카운트업하며 출력하는 함수를 작성하세요.
예: n=5일 때 1, 2, 3, 4, 5를 각각 한 줄씩 출력]]></description>
    <code><![CDATA[def countup(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
countup(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[1
2
3
4
5]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 종료합니다. 먼저 countup(n-1)을 호출한 다음, n을 출력합니다.]]></hint>
    <solution><![CDATA[def countup(n):
    # 기저 조건: n이 0 이하이면 종료
    if n <= 0:
        return
    # 재귀 호출: 먼저 1부터 n-1까지 출력
    countup(n - 1)
    # 현재 숫자를 출력
    print(n)

# 동작 과정:
# countup(5) → countup(4) → ... → countup(1) → countup(0)
# countup(0): 종료
# countup(1): print(1)
# countup(2): print(2)
# countup(3): print(3)
# countup(4): print(4)
# countup(5): print(5)]]></solution>
  </problem>

  <!-- 9. 별 삼각형 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 별(*)로 삼각형을 출력하는 함수를 작성하세요.
n줄짜리 삼각형에서 i번째 줄에는 i개의 별을 출력합니다.]]></description>
    <code><![CDATA[def print_stars(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_stars(4)]]></code>
    <input><![CDATA[4]]></input>
    <output><![CDATA[*
**
***
****]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 종료합니다. 먼저 print_stars(n-1)을 호출한 다음, '*' * n을 출력합니다.]]></hint>
    <solution><![CDATA[def print_stars(n):
    # 기저 조건: n이 0 이하이면 종료
    if n <= 0:
        return
    # 재귀 호출: 먼저 n-1줄까지 출력
    print_stars(n - 1)
    # 현재 줄에 n개의 별 출력
    print('*' * n)

# 동작 과정:
# print_stars(4) → print_stars(3) → ... → print_stars(0)
# print_stars(0): 종료
# print_stars(1): print('*')
# print_stars(2): print('**')
# print_stars(3): print('***')
# print_stars(4): print('****')]]></solution>
  </problem>

  <!-- 10. 별 역삼각형 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 별(*)로 역삼각형을 출력하는 함수를 작성하세요.
n줄짜리 역삼각형에서 첫 번째 줄에 n개, 마지막 줄에 1개의 별을 출력합니다.]]></description>
    <code><![CDATA[def print_reverse_stars(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_reverse_stars(4)]]></code>
    <input><![CDATA[4]]></input>
    <output><![CDATA[****
***
**
*]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 종료합니다. 먼저 '*' * n을 출력한 다음, print_reverse_stars(n-1)을 호출합니다.]]></hint>
    <solution><![CDATA[def print_reverse_stars(n):
    # 기저 조건: n이 0 이하이면 종료
    if n <= 0:
        return
    # 현재 줄에 n개의 별 출력
    print('*' * n)
    # 재귀 호출: n-1개 별의 역삼각형 출력
    print_reverse_stars(n - 1)

# 동작 과정:
# print_reverse_stars(4): print('****') → print_reverse_stars(3)
# print_reverse_stars(3): print('***') → print_reverse_stars(2)
# print_reverse_stars(2): print('**') → print_reverse_stars(1)
# print_reverse_stars(1): print('*') → print_reverse_stars(0)
# print_reverse_stars(0): 종료]]></solution>
  </problem>

  <!-- 11. 숫자 삼각형 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 숫자 삼각형을 출력하는 함수를 작성하세요.
i번째 줄에는 숫자 i가 i개 출력됩니다.
예: n=4일 때 1, 22, 333, 4444]]></description>
    <code><![CDATA[def print_number_triangle(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_number_triangle(4)]]></code>
    <input><![CDATA[4]]></input>
    <output><![CDATA[1
22
333
4444]]></output>
    <hint><![CDATA[기저 조건: n이 0 이하이면 종료합니다. 먼저 print_number_triangle(n-1)을 호출한 다음, str(n) * n을 출력합니다.]]></hint>
    <solution><![CDATA[def print_number_triangle(n):
    # 기저 조건: n이 0 이하이면 종료
    if n <= 0:
        return
    # 재귀 호출: 먼저 n-1줄까지 출력
    print_number_triangle(n - 1)
    # 현재 줄에 숫자 n을 n개 출력
    print(str(n) * n)

# 동작 과정:
# print_number_triangle(4) → print_number_triangle(3) → ... → print_number_triangle(0)
# print_number_triangle(0): 종료
# print_number_triangle(1): print('1')
# print_number_triangle(2): print('22')
# print_number_triangle(3): print('333')
# print_number_triangle(4): print('4444')]]></solution>
  </problem>

  <!-- 12. 자릿수 개수 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 주어진 양의 정수의 자릿수 개수를 계산하는 함수를 작성하세요.
예: 1234는 4자리, 56은 2자리]]></description>
    <code><![CDATA[def count_digits(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(count_digits(1234))  # 4가 나와야 합니다
print(count_digits(56))    # 2가 나와야 합니다
print(count_digits(7))     # 1이 나와야 합니다]]></code>
    <input><![CDATA[1234]]></input>
    <output><![CDATA[4]]></output>
    <hint><![CDATA[기저 조건: n이 한 자릿수(n < 10)이면 1을 반환합니다. 재귀 호출: 1 + count_digits(n//10)을 반환합니다.]]></hint>
    <solution><![CDATA[def count_digits(n):
    # 기저 조건: 한 자릿수이면 1 반환
    if n < 10:
        return 1
    # 재귀 호출: 1 + (마지막 자릿수를 제거한 숫자의 자릿수)
    return 1 + count_digits(n // 10)

# 동작 과정 예시:
# count_digits(1234) = 1 + count_digits(123)
#                    = 1 + 1 + count_digits(12)
#                    = 1 + 1 + 1 + count_digits(1)
#                    = 1 + 1 + 1 + 1
#                    = 4]]></solution>
  </problem>

  <!-- =========================== 문자열 기초 =========================== -->

  <!-- 13. 문자열 길이 계산 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 문자열의 길이를 계산하는 함수를 작성하세요. (len() 함수를 사용하지 않고)
예: "hello"의 길이는 5]]></description>
    <code><![CDATA[def string_length(s):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(string_length("hello"))   # 5가 나와야 합니다
print(string_length("python"))  # 6이 나와야 합니다
print(string_length(""))        # 0이 나와야 합니다]]></code>
    <input><![CDATA["hello"]]></input>
    <output><![CDATA[5]]></output>
    <hint><![CDATA[기저 조건: 문자열이 비어있으면 0을 반환합니다. 재귀 호출: 1 + string_length(s[1:])을 반환합니다.]]></hint>
    <solution><![CDATA[def string_length(s):
    # 기저 조건: 빈 문자열이면 0 반환
    if not s:  # s == "" 와 같음
        return 0
    # 재귀 호출: 1 + (첫 글자를 제거한 문자열의 길이)
    return 1 + string_length(s[1:])

# 동작 과정 예시:
# string_length("hello") = 1 + string_length("ello")
#                        = 1 + 1 + string_length("llo")
#                        = 1 + 1 + 1 + string_length("lo")
#                        = 1 + 1 + 1 + 1 + string_length("o")
#                        = 1 + 1 + 1 + 1 + 1 + string_length("")
#                        = 1 + 1 + 1 + 1 + 1 + 0
#                        = 5]]></solution>
  </problem>

  <!-- 14. 특정 문자 개수 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 문자열에서 특정 문자가 몇 개 있는지 세는 함수를 작성하세요.
예: "hello"에서 'l'은 2개]]></description>
    <code><![CDATA[def count_char(s, c):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(count_char("hello", 'l'))    # 2가 나와야 합니다
print(count_char("python", 'p'))   # 1이 나와야 합니다
print(count_char("aaa", 'a'))      # 3이 나와야 합니다]]></code>
    <input><![CDATA[s="hello", c='l']]></input>
    <output><![CDATA[2]]></output>
    <hint><![CDATA[기저 조건: 문자열이 비어있으면 0을 반환합니다. 재귀 호출: 첫 글자가 찾는 문자와 같으면 1을 더하고, 그렇지 않으면 0을 더한 다음 count_char(s[1:], c)를 호출합니다.]]></hint>
    <solution><![CDATA[def count_char(s, c):
    # 기저 조건: 빈 문자열이면 0 반환
    if not s:
        return 0
    # 첫 글자가 찾는 문자와 같은지 확인
    if s[0] == c:
        # 같으면 1을 더하고 나머지 문자열 확인
        return 1 + count_char(s[1:], c)
    else:
        # 다르면 0을 더하고 나머지 문자열 확인
        return 0 + count_char(s[1:], c)

# 더 간단한 버전:
# def count_char(s, c):
#     if not s:
#         return 0
#     return (1 if s[0] == c else 0) + count_char(s[1:], c)

# 동작 과정 예시:
# count_char("hello", 'l') = 0 + count_char("ello", 'l')  # h != l
#                          = 0 + 0 + count_char("llo", 'l')   # e != l
#                          = 0 + 0 + 1 + count_char("lo", 'l')    # l == l
#                          = 0 + 0 + 1 + 1 + count_char("o", 'l')     # l == l
#                          = 0 + 0 + 1 + 1 + 0 + count_char("", 'l')  # o != l
#                          = 0 + 0 + 1 + 1 + 0 + 0
#                          = 2]]></solution>
  </problem>

  <!-- 15. 문자열 한 글자씩 출력 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 문자열의 각 글자를 한 줄씩 출력하는 함수를 작성하세요.
예: "hello"를 입력하면 h, e, l, l, o가 각각 한 줄씩 출력]]></description>
    <code><![CDATA[def print_chars(s):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_chars("hello")]]></code>
    <input><![CDATA["hello"]]></input>
    <output><![CDATA[h
e
l
l
o]]></output>
    <hint><![CDATA[기저 조건: 문자열이 비어있으면 종료합니다. 첫 글자를 출력한 다음, print_chars(s[1:])을 호출합니다.]]></hint>
    <solution><![CDATA[def print_chars(s):
    # 기저 조건: 빈 문자열이면 종료
    if not s:
        return
    # 첫 글자 출력
    print(s[0])
    # 재귀 호출: 나머지 문자열의 각 글자 출력
    print_chars(s[1:])

# 동작 과정:
# print_chars("hello"): print('h') → print_chars("ello")
# print_chars("ello"): print('e') → print_chars("llo")
# print_chars("llo"): print('l') → print_chars("lo")
# print_chars("lo"): print('l') → print_chars("o")
# print_chars("o"): print('o') → print_chars("")
# print_chars(""): 종료]]></solution>
  </problem>

  <!-- 16. 문자열에서 모음 개수 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 문자열에서 모음(a, e, i, o, u)의 개수를 세는 함수를 작성하세요.
예: "hello"에서 모음은 e, o로 2개]]></description>
    <code><![CDATA[def count_vowels(s):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(count_vowels("hello"))    # 2가 나와야 합니다
print(count_vowels("python"))   # 1이 나와야 합니다
print(count_vowels("aeiou"))    # 5가 나와야 합니다]]></code>
    <input><![CDATA["hello"]]></input>
    <output><![CDATA[2]]></output>
    <hint><![CDATA[기저 조건: 문자열이 비어있으면 0을 반환합니다. 첫 글자가 모음(a, e, i, o, u 중 하나)이면 1을 더하고, 그렇지 않으면 0을 더한 다음 count_vowels(s[1:])을 호출합니다.]]></hint>
    <solution><![CDATA[def count_vowels(s):
    # 기저 조건: 빈 문자열이면 0 반환
    if not s:
        return 0
    
    # 모음 목록
    vowels = "aeiouAEIOU"  # 대소문자 모두 고려
    
    # 첫 글자가 모음인지 확인
    if s[0] in vowels:
        # 모음이면 1을 더하고 나머지 문자열 확인
        return 1 + count_vowels(s[1:])
    else:
        # 모음이 아니면 0을 더하고 나머지 문자열 확인
        return 0 + count_vowels(s[1:])

# 더 간단한 버전:
# def count_vowels(s):
#     if not s:
#         return 0
#     vowels = "aeiouAEIOU"
#     return (1 if s[0] in vowels else 0) + count_vowels(s[1:])

# 동작 과정 예시:
# count_vowels("hello") = 0 + count_vowels("ello")  # h는 모음이 아님
#                       = 0 + 1 + count_vowels("llo")   # e는 모음
#                       = 0 + 1 + 0 + count_vowels("lo")    # l은 모음이 아님
#                       = 0 + 1 + 0 + 0 + count_vowels("o")     # l은 모음이 아님
#                       = 0 + 1 + 0 + 0 + 1 + count_vowels("")      # o는 모음
#                       = 0 + 1 + 0 + 0 + 1 + 0
#                       = 2]]></solution>
  </problem>

  <!-- =========================== 배열 기초 =========================== -->

  <!-- 17. 배열의 합 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 리스트(배열)의 모든 원소의 합을 계산하는 함수를 작성하세요.
예: [1, 2, 3, 4, 5]의 합은 15]]></description>
    <code><![CDATA[def array_sum(arr):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(array_sum([1, 2, 3, 4, 5]))  # 15가 나와야 합니다
print(array_sum([10, 20, 30]))     # 60이 나와야 합니다
print(array_sum([]))               # 0이 나와야 합니다]]></code>
    <input><![CDATA[[1, 2, 3, 4, 5]]]></input>
    <output><![CDATA[15]]></output>
    <hint><![CDATA[기저 조건: 리스트가 비어있으면 0을 반환합니다. 재귀 호출: arr[0] + array_sum(arr[1:])을 반환합니다.]]></hint>
    <solution><![CDATA[def array_sum(arr):
    # 기저 조건: 빈 리스트이면 0 반환
    if not arr:
        return 0
    # 재귀 호출: 첫 번째 원소 + 나머지 원소들의 합
    return arr[0] + array_sum(arr[1:])

# 동작 과정 예시:
# array_sum([1,2,3,4,5]) = 1 + array_sum([2,3,4,5])
#                        = 1 + 2 + array_sum([3,4,5])
#                        = 1 + 2 + 3 + array_sum([4,5])
#                        = 1 + 2 + 3 + 4 + array_sum([5])
#                        = 1 + 2 + 3 + 4 + 5 + array_sum([])
#                        = 1 + 2 + 3 + 4 + 5 + 0
#                        = 15]]></solution>
  </problem>

  <!-- 18. 배열의 곱 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 리스트(배열)의 모든 원소의 곱을 계산하는 함수를 작성하세요.
예: [2, 3, 4]의 곱은 24]]></description>
    <code><![CDATA[def array_product(arr):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(array_product([2, 3, 4]))    # 24가 나와야 합니다
print(array_product([1, 5, 2]))    # 10이 나와야 합니다
print(array_product([]))           # 1이 나와야 합니다]]></code>
    <input><![CDATA[[2, 3, 4]]]></input>
    <output><![CDATA[24]]></output>
    <hint><![CDATA[기저 조건: 리스트가 비어있으면 1을 반환합니다(곱셈의 항등원). 재귀 호출: arr[0] * array_product(arr[1:])을 반환합니다.]]></hint>
    <solution><![CDATA[def array_product(arr):
    # 기저 조건: 빈 리스트이면 1 반환 (곱셈의 항등원)
    if not arr:
        return 1
    # 재귀 호출: 첫 번째 원소 × 나머지 원소들의 곱
    return arr[0] * array_product(arr[1:])

# 동작 과정 예시:
# array_product([2,3,4]) = 2 × array_product([3,4])
#                        = 2 × 3 × array_product([4])
#                        = 2 × 3 × 4 × array_product([])
#                        = 2 × 3 × 4 × 1
#                        = 24]]></solution>
  </problem>

  <!-- 19. 배열 원소 개수 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 리스트(배열)의 원소 개수를 계산하는 함수를 작성하세요. (len() 함수를 사용하지 않고)
예: [1, 2, 3, 4, 5]의 원소 개수는 5]]></description>
    <code><![CDATA[def array_length(arr):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(array_length([1, 2, 3, 4, 5]))  # 5가 나와야 합니다
print(array_length([10, 20]))         # 2가 나와야 합니다
print(array_length([]))               # 0이 나와야 합니다]]></code>
    <input><![CDATA[[1, 2, 3, 4, 5]]]></input>
    <output><![CDATA[5]]></output>
    <hint><![CDATA[기저 조건: 리스트가 비어있으면 0을 반환합니다. 재귀 호출: 1 + array_length(arr[1:])을 반환합니다.]]></hint>
    <solution><![CDATA[def array_length(arr):
    # 기저 조건: 빈 리스트이면 0 반환
    if not arr:
        return 0
    # 재귀 호출: 1 + (첫 번째 원소를 제거한 리스트의 길이)
    return 1 + array_length(arr[1:])

# 동작 과정 예시:
# array_length([1,2,3,4,5]) = 1 + array_length([2,3,4,5])
#                           = 1 + 1 + array_length([3,4,5])
#                           = 1 + 1 + 1 + array_length([4,5])
#                           = 1 + 1 + 1 + 1 + array_length([5])
#                           = 1 + 1 + 1 + 1 + 1 + array_length([])
#                           = 1 + 1 + 1 + 1 + 1 + 0
#                           = 5]]></solution>
  </problem>

  <!-- 20. 배열 원소 하나씩 출력 -->
  <problem>
    <description><![CDATA[재귀함수를 사용하여 리스트(배열)의 각 원소를 한 줄씩 출력하는 함수를 작성하세요.
예: [1, 2, 3]을 입력하면 1, 2, 3이 각각 한 줄씩 출력]]></description>
    <code><![CDATA[def print_array(arr):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_array([1, 2, 3, 4, 5])]]></code>
    <input><![CDATA[[1, 2, 3, 4, 5]]]></input>
    <output><![CDATA[1
2
3
4
5]]></output>
    <hint><![CDATA[기저 조건: 리스트가 비어있으면 종료합니다. 첫 번째 원소를 출력한 다음, print_array(arr[1:])을 호출합니다.]]></hint>
    <solution><![CDATA[def print_array(arr):
    # 기저 조건: 빈 리스트이면 종료
    if not arr:
        return
    # 첫 번째 원소 출력
    print(arr[0])
    # 재귀 호출: 나머지 원소들 출력
    print_array(arr[1:])

# 동작 과정:
# print_array([1,2,3,4,5]): print(1) → print_array([2,3,4,5])
# print_array([2,3,4,5]): print(2) → print_array([3,4,5])
# print_array([3,4,5]): print(3) → print_array([4,5])
# print_array([4,5]): print(4) → print_array([5])
# print_array([5]): print(5) → print_array([])
# print_array([]): 종료]]></solution>
  </problem>

</problems>