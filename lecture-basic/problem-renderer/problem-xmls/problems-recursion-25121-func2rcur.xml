<?xml version="1.0" encoding="UTF-8"?>
<!--
  제어문을 재귀함수로 변환 연습 - 2025.1.21 생성
  
  이 파일은 제어문(for, while, if)으로 구현된 코드를 재귀함수로 
  변환하는 연습 문제들을 포함합니다.
  
  학습 목표:
  - 반복문의 동작 원리를 재귀함수로 이해하기
  - 재귀함수의 기저 조건과 재귀 호출 설계
  - 반복적 사고를 재귀적 사고로 전환하기
-->
<problems>

  <!-- 1. n개 문자 출력 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[# 제어문 구현
def apple_iterative(char, n):
    for i in range(n):
        print(char, end='')

# 재귀함수로 변환하여 구현하세요
def apple(char, n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[char='*', n=5]]></input>
    <output><![CDATA[*****]]></output>
    <solution><![CDATA[def apple(char, n):
    if n <= 0:
        return
    print(char, end='')
    apple(char, n - 1)]]></solution>
  </problem>

  <!-- 2. 1부터 n까지 한 줄씩 출력 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def banana_iterative(n):
    for i in range(1, n + 1):
        print(i)

def banana(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[1
2
3
4
5]]></output>
    <solution><![CDATA[def banana(n):
    if n <= 0:
        return
    banana(n - 1)
    print(n)]]></solution>
  </problem>

  <!-- 3. 별 삼각형 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def cherry_iterative(n):
    for i in range(1, n + 1):
        print('*' * i)

def cherry(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[*
**
***
****
*****]]></output>
    <solution><![CDATA[def cherry(n):
    if n <= 0:
        return
    cherry(n - 1)
    print('*' * n)]]></solution>
  </problem>

  <!-- 4. 역별 삼각형 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def durian_iterative(n):
    for i in range(n, 0, -1):
        print('*' * i)

def durian(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[*****
****
***
**
*]]></output>
    <solution><![CDATA[def durian(n):
    if n <= 0:
        return
    print('*' * n)
    durian(n - 1)]]></solution>
  </problem>

  <!-- 5. 숫자 삼각형 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def elderberry_iterative(n):
    for i in range(1, n + 1):
        print(str(i) * i)

def elderberry(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[1
22
333
4444
55555]]></output>
    <solution><![CDATA[def elderberry(n):
    if n <= 0:
        return
    elderberry(n - 1)
    print(str(n) * n)]]></solution>
  </problem>

  <!-- 6. 팩토리얼 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def fig_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

def fig(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[120]]></output>
    <solution><![CDATA[def fig(n):
    if n <= 1:
        return 1
    return n * fig(n - 1)]]></solution>
  </problem>

  <!-- 7. 리스트 합계 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def grape_iterative(numbers):
    total = 0
    for num in numbers:
        total += num
    return total

def grape(numbers):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[[1, 2, 3, 4, 5]]]></input>
    <output><![CDATA[15]]></output>
    <solution><![CDATA[def grape(numbers):
    if not numbers:
        return 0
    return numbers[0] + grape(numbers[1:])]]></solution>
  </problem>

  <!-- 8. 최대공약수 (유클리드 호제법) -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def honeydew_iterative(a, b):
    while b != 0:
        temp = b
        b = a % b
        a = temp
    return a

def honeydew(a, b):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[a=48, b=18]]></input>
    <output><![CDATA[6]]></output>
    <solution><![CDATA[def honeydew(a, b):
    if b == 0:
        return a
    return honeydew(b, a % b)]]></solution>
  </problem>

  <!-- 9. 10진수를 2진수로 변환 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def kiwi_iterative(n):
    if n == 0:
        return "0"
    
    result = ""
    while n > 0:
        result = str(n % 2) + result
        n = n // 2
    return result

def kiwi(n):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[10]]></input>
    <output><![CDATA[1010]]></output>
    <solution><![CDATA[def kiwi(n):
    if n == 0:
        return "0"
    if n == 1:
        return "1"
    return kiwi(n // 2) + str(n % 2)]]></solution>
  </problem>

  <!-- 10. 거듭제곱 -->
  <problem>
    <description><![CDATA[다음 제어문으로 구현된 함수를 재귀함수로 변환하세요.]]></description>
    <code><![CDATA[def lemon_iterative(base, exponent):
    result = 1
    for i in range(exponent):
        result *= base
    return result

def lemon(base, exponent):
    # 여기에 코드를 작성하세요
    pass]]></code>
    <input><![CDATA[base=2, exponent=5]]></input>
    <output><![CDATA[32]]></output>
    <solution><![CDATA[def lemon(base, exponent):
    if exponent == 0:
        return 1
    return base * lemon(base, exponent - 1)]]></solution>
  </problem>

</problems>