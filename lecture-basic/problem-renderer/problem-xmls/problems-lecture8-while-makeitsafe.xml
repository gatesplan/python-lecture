<?xml version="1.0" encoding="UTF-8"?>
<problems>
  <!-- 문제 1: 카운터 증가 빠뜨린 경우 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 1부터 5까지 출력하고 종료하도록 수정하세요.</description>
    <code><![CDATA[count = 1
while count <= 5:
    print(f"숫자: {count}")
    # count += 1 이 빠져있음!]]></code>
    <input></input>
    <output><![CDATA[숫자: 1
숫자: 2
숫자: 3
숫자: 4
숫자: 5]]></output>
    <hint>count를 증가시키는 코드를 추가하세요.</hint>
    <solution><![CDATA[count = 1
while count <= 5:
    print(f"숫자: {count}")
    count += 1  # 이 줄을 추가]]></solution>
  </problem>

  <!-- 문제 2: 입력 받기 빠뜨린 경우 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 사용자가 "stop"을 입력할 때까지 계속 입력받도록 수정하세요.</description>
    <code><![CDATA[user_input = ""
while user_input != "stop":
    print("계속 실행 중...")
    # user_input = input() 이 빠져있음!]]></code>
    <input><![CDATA[hello
world
stop]]></input>
    <output><![CDATA[계속 실행 중...
계속 실행 중...
계속 실행 중...
프로그램 종료]]></output>
    <hint>사용자 입력을 받는 코드를 추가하고 종료 메시지도 넣으세요.</hint>
    <solution><![CDATA[user_input = ""
while user_input != "stop":
    print("계속 실행 중...")
    user_input = input()  # 이 줄을 추가
print("프로그램 종료")]]></solution>
  </problem>

  <!-- 문제 3: 조건 변경 빠뜨린 경우 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 3번 반복하고 종료하도록 수정하세요.</description>
    <code><![CDATA[running = True
count = 0
while running:
    count += 1
    print(f"실행 중... {count}")
    # running을 False로 바꾸는 조건이 없음!]]></code>
    <input></input>
    <output><![CDATA[실행 중... 1
실행 중... 2
실행 중... 3
작업 완료]]></output>
    <hint>count가 3이 되면 running을 False로 바꾸고 완료 메시지를 추가하세요.</hint>
    <solution><![CDATA[running = True
count = 0
while running:
    count += 1
    print(f"실행 중... {count}")
    if count >= 3:  # 이 조건을 추가
        running = False
print("작업 완료")]]></solution>
  </problem>

  <!-- 문제 4: 안전장치 추가하기 -->
  <problem>
    <description>다음 코드에 안전장치를 추가하세요. 최대 10번 반복하면 강제로 종료되도록 만드세요.</description>
    <code><![CDATA[while True:
    number = int(input("숫자 입력 (0이면 종료): "))
    if number == 0:
        break
    print(f"입력한 숫자: {number}")]]></code>
    <input><![CDATA[5
3
8
2
1
7
4
6
9
11
12]]></input>
    <output><![CDATA[숫자 입력 (0이면 종료): 5
입력한 숫자: 5
숫자 입력 (0이면 종료): 3
입력한 숫자: 3
숫자 입력 (0이면 종료): 8
입력한 숫자: 8
숫자 입력 (0이면 종료): 2
입력한 숫자: 2
숫자 입력 (0이면 종료): 1
입력한 숫자: 1
숫자 입력 (0이면 종료): 7
입력한 숫자: 7
숫자 입력 (0이면 종료): 4
입력한 숫자: 4
숫자 입력 (0이면 종료): 6
입력한 숫자: 6
숫자 입력 (0이면 종료): 9
입력한 숫자: 9
숫자 입력 (0이면 종료): 11
입력한 숫자: 11
안전장치 작동! 최대 입력 횟수에 도달했습니다.]]></output>
    <hint>반복 횟수를 세는 변수를 추가하고 10번 넘으면 break하세요.</hint>
    <solution><![CDATA[safety_count = 0  # 안전장치 카운터 추가
max_attempts = 10  # 최대 시도 횟수

while True:
    number = int(input("숫자 입력 (0이면 종료): "))
    if number == 0:
        break
    print(f"입력한 숫자: {number}")
    
    safety_count += 1  # 카운터 증가
    if safety_count >= max_attempts:  # 안전장치 체크
        print("안전장치 작동! 최대 입력 횟수에 도달했습니다.")
        break]]></solution>
  </problem>

  <!-- 문제 5: 잘못된 조건식 수정 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 5부터 1까지 카운트다운하도록 수정하세요.</description>
    <code><![CDATA[countdown = 5
while countdown <= 5:  # 조건이 잘못됨!
    print(f"카운트다운: {countdown}")
    countdown -= 1]]></code>
    <input></input>
    <output><![CDATA[카운트다운: 5
카운트다운: 4
카운트다운: 3
카운트다운: 2
카운트다운: 1
발사!]]></output>
    <hint>조건을 countdown > 0으로 바꾸고 발사 메시지를 추가하세요.</hint>
    <solution><![CDATA[countdown = 5
while countdown > 0:  # 조건 수정
    print(f"카운트다운: {countdown}")
    countdown -= 1
print("발사!")]]></solution>
  </problem>

  <!-- 문제 6: 리스트에서 요소 제거 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 리스트에서 3을 모두 제거하고 안전하게 종료하도록 수정하세요.</description>
    <code><![CDATA[numbers = [1, 3, 2, 3, 4, 3, 5]
while 3 in numbers:
    print(f"3을 찾았습니다. 현재 리스트: {numbers}")
    # numbers.remove(3) 이 빠져있음!]]></code>
    <input></input>
    <output><![CDATA[3을 찾았습니다. 현재 리스트: [1, 3, 2, 3, 4, 3, 5]
3을 제거했습니다. 현재 리스트: [1, 2, 3, 4, 3, 5]
3을 찾았습니다. 현재 리스트: [1, 2, 3, 4, 3, 5]
3을 제거했습니다. 현재 리스트: [1, 2, 4, 3, 5]
3을 찾았습니다. 현재 리스트: [1, 2, 4, 3, 5]
3을 제거했습니다. 현재 리스트: [1, 2, 4, 5]
모든 3이 제거되었습니다: [1, 2, 4, 5]]]></output>
    <hint>numbers.remove(3)을 추가하고 완료 메시지도 넣으세요.</hint>
    <solution><![CDATA[numbers = [1, 3, 2, 3, 4, 3, 5]
while 3 in numbers:
    print(f"3을 찾았습니다. 현재 리스트: {numbers}")
    numbers.remove(3)  # 이 줄을 추가
    print(f"3을 제거했습니다. 현재 리스트: {numbers}")
print(f"모든 3이 제거되었습니다: {numbers}")]]></solution>
  </problem>

  <!-- 문제 7: 게임 루프에 종료 조건 추가 -->
  <problem>
    <description>다음 게임 루프에 안전장치를 추가하세요. 10턴이 지나면 "게임 시간 초과"로 강제 종료되도록 만드세요.</description>
    <code><![CDATA[score = 0
while True:
    action = input("행동을 선택하세요 (attack/run/quit): ")
    if action == "attack":
        score += 10
        print(f"공격! 점수: {score}")
    elif action == "run":
        print("도망쳤습니다!")
    elif action == "quit":
        print(f"게임 종료! 최종 점수: {score}")
        break
    else:
        print("잘못된 명령입니다.")]]></code>
    <input><![CDATA[attack
attack
run
attack
attack
attack
attack
run
attack
attack
attack]]></input>
    <output><![CDATA[행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 10
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 20
행동을 선택하세요 (attack/run/quit): run
도망쳤습니다!
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 30
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 40
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 50
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 60
행동을 선택하세요 (attack/run/quit): run
도망쳤습니다!
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 70
행동을 선택하세요 (attack/run/quit): attack
공격! 점수: 80
게임 시간 초과! 최종 점수: 80]]></output>
    <hint>턴 수를 세는 변수를 추가하고 10턴이 되면 break하세요.</hint>
    <solution><![CDATA[score = 0
turn = 0  # 턴 수 추가
max_turns = 10  # 최대 턴 수

while True:
    action = input("행동을 선택하세요 (attack/run/quit): ")
    turn += 1  # 턴 증가
    
    if action == "attack":
        score += 10
        print(f"공격! 점수: {score}")
    elif action == "run":
        print("도망쳤습니다!")
    elif action == "quit":
        print(f"게임 종료! 최종 점수: {score}")
        break
    else:
        print("잘못된 명령입니다.")
    
    if turn >= max_turns:  # 안전장치
        print(f"게임 시간 초과! 최종 점수: {score}")
        break]]></solution>
  </problem>

  <!-- 문제 8: 검색 루프 수정 -->
  <problem>
    <description>다음 코드는 무한루프입니다. 리스트에서 target을 찾으면 인덱스를 출력하고 종료하도록 수정하세요.</description>
    <code><![CDATA[numbers = [10, 20, 30, 40, 50]
target = 30
index = 0
found = False

while not found:
    if numbers[index] == target:
        found = True
        print(f"{target}을 인덱스 {index}에서 찾았습니다!")
    # index += 1 이 빠져있음!]]></code>
    <input></input>
    <output><![CDATA[30을 인덱스 2에서 찾았습니다!]]></output>
    <hint>index를 증가시키는 코드를 else 부분에 추가하세요.</hint>
    <solution><![CDATA[numbers = [10, 20, 30, 40, 50]
target = 30
index = 0
found = False

while not found:
    if numbers[index] == target:
        found = True
        print(f"{target}을 인덱스 {index}에서 찾았습니다!")
    else:
        index += 1  # 이 줄을 추가]]></solution>
  </problem>

  <!-- 문제 9: 복합 조건 안전장치 -->
  <problem>
    <description>다음 코드에 두 가지 안전장치를 추가하세요: 1) 100번 넘게 반복하면 종료 2) 합계가 1000 넘으면 종료</description>
    <code><![CDATA[total = 0
while True:
    number = int(input("숫자 입력: "))
    total += number
    print(f"현재 합계: {total}")]]></code>
    <input><![CDATA[100
200
300
400
500]]></input>
    <output><![CDATA[숫자 입력: 100
현재 합계: 100
숫자 입력: 200
현재 합계: 300
숫자 입력: 300
현재 합계: 600
숫자 입력: 400
현재 합계: 1000
숫자 입력: 500
현재 합계: 1500
안전장치 작동! 합계가 1000을 초과했습니다.]]></output>
    <hint>반복 횟수와 합계를 모두 체크하는 안전장치를 추가하세요.</hint>
    <solution><![CDATA[total = 0
count = 0  # 반복 횟수 카운터
max_count = 100  # 최대 반복 횟수
max_total = 1000  # 최대 합계

while True:
    number = int(input("숫자 입력: "))
    total += number
    count += 1
    print(f"현재 합계: {total}")
    
    # 안전장치 1: 반복 횟수 체크
    if count >= max_count:
        print("안전장치 작동! 최대 반복 횟수에 도달했습니다.")
        break
    
    # 안전장치 2: 합계 체크  
    if total > max_total:
        print("안전장치 작동! 합계가 1000을 초과했습니다.")
        break]]></solution>
  </problem>

  <!-- 문제 10: 복잡한 무한루프 수정 -->
  <problem>
    <description>다음 비밀번호 체크 시스템의 무한루프를 수정하세요. 3번 틀리면 "계정 잠김", 맞으면 "로그인 성공"으로 종료하세요.</description>
    <code><![CDATA[correct_password = "secret123"
attempts = 0

while True:
    password = input("비밀번호 입력: ")
    attempts += 1
    
    if password == correct_password:
        print("로그인 성공!")
        # break가 없음!
    else:
        print(f"틀렸습니다. 시도 횟수: {attempts}")
        # 3번 틀렸을 때 처리가 없음!]]></code>
    <input><![CDATA[wrong1
wrong2
wrong3]]></input>
    <output><![CDATA[비밀번호 입력: wrong1
틀렸습니다. 시도 횟수: 1
비밀번호 입력: wrong2
틀렸습니다. 시도 횟수: 2
비밀번호 입력: wrong3
틀렸습니다. 시도 횟수: 3
계정이 잠겼습니다.]]></output>
    <hint>성공 시 break를 추가하고, 3번 틀렸을 때도 break를 추가하세요.</hint>
    <solution><![CDATA[correct_password = "secret123"
attempts = 0
max_attempts = 3

while True:
    password = input("비밀번호 입력: ")
    attempts += 1
    
    if password == correct_password:
        print("로그인 성공!")
        break  # 성공 시 종료
    else:
        print(f"틀렸습니다. 시도 횟수: {attempts}")
        if attempts >= max_attempts:  # 3번 틀렸을 때
            print("계정이 잠겼습니다.")
            break]]></solution>
  </problem>
</problems>