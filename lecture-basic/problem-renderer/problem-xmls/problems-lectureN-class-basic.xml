<?xml version="1.0" encoding="UTF-8"?>
<problems>
  <problem>
    <description><![CDATA[Car 클래스를 만들고, brand와 color 속성을 가지도록 하세요. show_info() 메서드는 "이 차는 {brand} 브랜드이고, 색상은 {color}입니다."를 반환합니다. "현대", "파란색" 자동차와 "기아", "빨간색" 자동차 두 개를 만들고 각각의 정보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[이 차는 현대 브랜드이고, 색상은 파란색입니다.
이 차는 기아 브랜드이고, 색상은 빨간색입니다.]]></output>
    <hint><![CDATA[class 키워드로 클래스를 만들고, __init__ 메서드에서 self.brand와 self.color에 값을 저장하세요.]]></hint>
    <solution><![CDATA[class Car:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color
    
    def show_info(self):
        return f"이 차는 {self.brand} 브랜드이고, 색상은 {self.color}입니다."

car1 = Car("현대", "파란색")
car2 = Car("기아", "빨간색")

print(car1.show_info())
print(car2.show_info())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Book 클래스를 만들고, title, author, price 속성을 가지도록 하세요. get_description() 메서드는 "'{title}' - {author} 저, {price}원"을 반환합니다. "파이썬 기초", "김철수", 25000원 책과 "자바 입문", "이영희", 30000원 책 두 개를 만들고 각각의 설명을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA['파이썬 기초' - 김철수 저, 25000원
'자바 입문' - 이영희 저, 30000원]]></output>
    <hint><![CDATA[__init__ 메서드에서 세 개의 매개변수를 받아 속성에 저장하고, get_description 메서드에서 f-string을 사용하세요.]]></hint>
    <solution><![CDATA[class Book:
    def __init__(self, title, author, price):
        self.title = title
        self.author = author
        self.price = price
    
    def get_description(self):
        return f"'{self.title}' - {self.author} 저, {self.price}원"

book1 = Book("파이썬 기초", "김철수", 25000)
book2 = Book("자바 입문", "이영희", 30000)

print(book1.get_description())
print(book2.get_description())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Student 클래스를 만들고, name과 age 속성을 가지도록 하세요. introduce() 메서드는 "안녕하세요! 저는 {name}이고, {age}살입니다."를 반환합니다. "홍길동", 20살 학생과 "김영수", 22살 학생 두 명을 만들고 각각 자기소개를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[안녕하세요! 저는 홍길동이고, 20살입니다.
안녕하세요! 저는 김영수이고, 22살입니다.]]></output>
    <hint><![CDATA[Student 클래스의 __init__에서 name과 age를 초기화하고, introduce 메서드에서 인사말을 반환하세요.]]></hint>
    <solution><![CDATA[class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def introduce(self):
        return f"안녕하세요! 저는 {self.name}이고, {self.age}살입니다."

student1 = Student("홍길동", 20)
student2 = Student("김영수", 22)

print(student1.introduce())
print(student2.introduce())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Phone 클래스를 만들고, brand, model, storage 속성을 가지도록 하세요. display_specs() 메서드는 "{brand} {model} - 저장용량: {storage}GB"를 반환합니다. "삼성", "갤럭시S23", 128GB 폰과 "애플", "아이폰14", 256GB 폰 두 개를 만들고 각각의 사양을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[삼성 갤럭시S23 - 저장용량: 128GB
애플 아이폰14 - 저장용량: 256GB]]></output>
    <hint><![CDATA[세 개의 속성을 __init__에서 초기화하고, display_specs에서 정보를 포맷팅해서 반환하세요.]]></hint>
    <solution><![CDATA[class Phone:
    def __init__(self, brand, model, storage):
        self.brand = brand
        self.model = model
        self.storage = storage
    
    def display_specs(self):
        return f"{self.brand} {self.model} - 저장용량: {self.storage}GB"

phone1 = Phone("삼성", "갤럭시S23", 128)
phone2 = Phone("애플", "아이폰14", 256)

print(phone1.display_specs())
print(phone2.display_specs())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Animal 클래스를 만들고, name과 sound 속성을 가지도록 하세요. make_sound() 메서드는 "{name}: {sound}!"를 반환합니다. "고양이", "야옹" 동물과 "개", "멍멍" 동물 두 마리를 만들고 각각의 소리를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[고양이: 야옹!
개: 멍멍!]]></output>
    <hint><![CDATA[Animal 클래스에서 name과 sound를 저장하고, make_sound에서 동물의 이름과 소리를 조합해서 반환하세요.]]></hint>
    <solution><![CDATA[class Animal:
    def __init__(self, name, sound):
        self.name = name
        self.sound = sound
    
    def make_sound(self):
        return f"{self.name}: {self.sound}!"

animal1 = Animal("고양이", "야옹")
animal2 = Animal("개", "멍멍")

print(animal1.make_sound())
print(animal2.make_sound())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Restaurant 클래스를 만들고, name, cuisine, price, rating 속성을 가지도록 하세요. get_menu_info() 메서드는 "{name} ({cuisine}요리) - 평균가격: {price}원, 평점: {rating}점"을 반환합니다. "맛있는집", "한국", 12000, 4.5점 식당과 "파스타하우스", "이탈리아", 18000, 4.2점 식당 두 곳을 만들고 각각의 정보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[맛있는집 (한국요리) - 평균가격: 12000원, 평점: 4.5점
파스타하우스 (이탈리아요리) - 평균가격: 18000원, 평점: 4.2점]]></output>
    <hint><![CDATA[네 개의 속성을 모두 __init__에서 초기화하고, get_menu_info에서 모든 정보를 포함한 문자열을 반환하세요.]]></hint>
    <solution><![CDATA[class Restaurant:
    def __init__(self, name, cuisine, price, rating):
        self.name = name
        self.cuisine = cuisine
        self.price = price
        self.rating = rating
    
    def get_menu_info(self):
        return f"{self.name} ({self.cuisine}요리) - 평균가격: {self.price}원, 평점: {self.rating}점"

restaurant1 = Restaurant("맛있는집", "한국", 12000, 4.5)
restaurant2 = Restaurant("파스타하우스", "이탈리아", 18000, 4.2)

print(restaurant1.get_menu_info())
print(restaurant2.get_menu_info())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Movie 클래스를 만들고, title, director, year 속성을 가지도록 하세요. print_details() 메서드는 "영화 '{title}' ({year}) - 감독: {director}"를 반환합니다. "기생충", "봉준호", 2019년 영화와 "아바타", "제임스 카메론", 2009년 영화 두 편을 만들고 각각의 상세정보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[영화 '기생충' (2019) - 감독: 봉준호
영화 '아바타' (2009) - 감독: 제임스 카메론]]></output>
    <hint><![CDATA[세 개의 속성을 저장하고, print_details에서 영화 정보를 깔끔하게 정리해서 반환하세요.]]></hint>
    <solution><![CDATA[class Movie:
    def __init__(self, title, director, year):
        self.title = title
        self.director = director
        self.year = year
    
    def print_details(self):
        return f"영화 '{self.title}' ({self.year}) - 감독: {self.director}"

movie1 = Movie("기생충", "봉준호", 2019)
movie2 = Movie("아바타", "제임스 카메론", 2009)

print(movie1.print_details())
print(movie2.print_details())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Computer 클래스를 만들고, brand, cpu, ram, storage 속성을 가지도록 하세요. show_status() 메서드는 "{brand} 컴퓨터 - CPU: {cpu}, RAM: {ram}GB, 저장용량: {storage}GB"를 반환합니다. "삼성", "인텔i7", 16, 512 컴퓨터와 "LG", "AMD라이젠5", 8, 256 컴퓨터 두 대를 만들고 각각의 상태를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[삼성 컴퓨터 - CPU: 인텔i7, RAM: 16GB, 저장용량: 512GB
LG 컴퓨터 - CPU: AMD라이젠5, RAM: 8GB, 저장용량: 256GB]]></output>
    <hint><![CDATA[네 개의 속성을 모두 초기화하고, show_status에서 컴퓨터 사양을 상세히 표시하세요.]]></hint>
    <solution><![CDATA[class Computer:
    def __init__(self, brand, cpu, ram, storage):
        self.brand = brand
        self.cpu = cpu
        self.ram = ram
        self.storage = storage
    
    def show_status(self):
        return f"{self.brand} 컴퓨터 - CPU: {self.cpu}, RAM: {self.ram}GB, 저장용량: {self.storage}GB"

computer1 = Computer("삼성", "인텔i7", 16, 512)
computer2 = Computer("LG", "AMD라이젠5", 8, 256)

print(computer1.show_status())
print(computer2.show_status())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[House 클래스를 만들고, address, rooms, area 속성을 가지도록 하세요. describe() 메서드는 "{address}에 위치한 {rooms}룸, 면적 {area}평 주택"을 반환합니다. "서울시 강남구", 3, 25평 집과 "부산시 해운대구", 4, 32평 집 두 채를 만들고 각각의 설명을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[서울시 강남구에 위치한 3룸, 면적 25평 주택
부산시 해운대구에 위치한 4룸, 면적 32평 주택]]></output>
    <hint><![CDATA[세 개의 속성을 저장하고, describe에서 주택 정보를 자연스럽게 문장으로 만들어 반환하세요.]]></hint>
    <solution><![CDATA[class House:
    def __init__(self, address, rooms, area):
        self.address = address
        self.rooms = rooms
        self.area = area
    
    def describe(self):
        return f"{self.address}에 위치한 {self.rooms}룸, 면적 {self.area}평 주택"

house1 = House("서울시 강남구", 3, 25)
house2 = House("부산시 해운대구", 4, 32)

print(house1.describe())
print(house2.describe())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Game 클래스를 만들고, title과 genre 속성을 가지도록 하세요. start_info() 메서드는 "{genre} 게임 '{title}'을(를) 시작합니다!"를 반환합니다. "리그오브레전드", "MOBA" 게임과 "오버워치", "FPS" 게임 두 개를 만들고 각각의 시작 메시지를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[MOBA 게임 '리그오브레전드'을(를) 시작합니다!
FPS 게임 '오버워치'을(를) 시작합니다!]]></output>
    <hint><![CDATA[두 개의 속성을 저장하고, start_info에서 게임 장르와 제목을 포함한 시작 메시지를 반환하세요.]]></hint>
    <solution><![CDATA[class Game:
    def __init__(self, title, genre):
        self.title = title
        self.genre = genre
    
    def start_info(self):
        return f"{self.genre} 게임 '{self.title}'을(를) 시작합니다!"

game1 = Game("리그오브레전드", "MOBA")
game2 = Game("오버워치", "FPS")

print(game1.start_info())
print(game2.start_info())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Coffee 클래스를 만들고, name과 temperature 속성을 가지도록 하세요. get_flavor() 메서드는 "{temperature} {name} 한 잔이 준비되었습니다."를 반환합니다. "아메리카노", "뜨거운" 커피와 "아이스라떼", "차가운" 커피 두 잔을 만들고 각각의 맛 정보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[뜨거운 아메리카노 한 잔이 준비되었습니다.
차가운 아이스라떼 한 잔이 준비되었습니다.]]></output>
    <hint><![CDATA[커피 이름과 온도를 저장하고, get_flavor에서 커피 정보를 안내 문구로 반환하세요.]]></hint>
    <solution><![CDATA[class Coffee:
    def __init__(self, name, temperature):
        self.name = name
        self.temperature = temperature
    
    def get_flavor(self):
        return f"{self.temperature} {self.name} 한 잔이 준비되었습니다."

coffee1 = Coffee("아메리카노", "뜨거운")
coffee2 = Coffee("아이스라떼", "차가운")

print(coffee1.get_flavor())
print(coffee2.get_flavor())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Bicycle 클래스를 만들고, brand, gear, color 속성을 가지도록 하세요. show_features() 메서드는 "{color} {brand} 자전거 ({gear}단 기어)"를 반환합니다. "자이언트", 21, "파란색" 자전거와 "트렉", 18, "검은색" 자전거 두 대를 만들고 각각의 특징을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[파란색 자이언트 자전거 (21단 기어)
검은색 트렉 자전거 (18단 기어)]]></output>
    <hint><![CDATA[세 개의 속성을 초기화하고, show_features에서 자전거의 색상, 브랜드, 기어 정보를 조합하세요.]]></hint>
    <solution><![CDATA[class Bicycle:
    def __init__(self, brand, gear, color):
        self.brand = brand
        self.gear = gear
        self.color = color
    
    def show_features(self):
        return f"{self.color} {self.brand} 자전거 ({self.gear}단 기어)"

bicycle1 = Bicycle("자이언트", 21, "파란색")
bicycle2 = Bicycle("트렉", 18, "검은색")

print(bicycle1.show_features())
print(bicycle2.show_features())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Teacher 클래스를 만들고, name과 subject 속성을 가지도록 하세요. present_class() 메서드는 "안녕하세요, {subject} 담당 {name} 선생님입니다."를 반환합니다. "김철수", "수학" 선생님과 "이영희", "영어" 선생님 두 분을 만들고 각각의 수업 인사를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[안녕하세요, 수학 담당 김철수 선생님입니다.
안녕하세요, 영어 담당 이영희 선생님입니다.]]></output>
    <hint><![CDATA[선생님의 이름과 담당 과목을 저장하고, present_class에서 인사말을 만들어 반환하세요.]]></hint>
    <solution><![CDATA[class Teacher:
    def __init__(self, name, subject):
        self.name = name
        self.subject = subject
    
    def present_class(self):
        return f"안녕하세요, {self.subject} 담당 {self.name} 선생님입니다."

teacher1 = Teacher("김철수", "수학")
teacher2 = Teacher("이영희", "영어")

print(teacher1.present_class())
print(teacher2.present_class())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Pizza 클래스를 만들고, name, size, toppings, price 속성을 가지도록 하세요. describe_taste() 메서드는 "{size}사이즈 {name} ({toppings} 토핑) - {price}원"을 반환합니다. "페퍼로니", "라지", "페퍼로니, 치즈", 25000원 피자와 "하와이안", "미디움", "햄, 파인애플", 22000원 피자 두 개를 만들고 각각의 맛 설명을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[라지사이즈 페퍼로니 (페퍼로니, 치즈 토핑) - 25000원
미디움사이즈 하와이안 (햄, 파인애플 토핑) - 22000원]]></output>
    <hint><![CDATA[네 개의 속성을 모두 저장하고, describe_taste에서 피자의 모든 정보를 포함한 설명을 반환하세요.]]></hint>
    <solution><![CDATA[class Pizza:
    def __init__(self, name, size, toppings, price):
        self.name = name
        self.size = size
        self.toppings = toppings
        self.price = price
    
    def describe_taste(self):
        return f"{self.size}사이즈 {self.name} ({self.toppings} 토핑) - {self.price}원"

pizza1 = Pizza("페퍼로니", "라지", "페퍼로니, 치즈", 25000)
pizza2 = Pizza("하와이안", "미디움", "햄, 파인애플", 22000)

print(pizza1.describe_taste())
print(pizza2.describe_taste())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Flower 클래스를 만들고, name과 color 속성을 가지도록 하세요. bloom_message() 메서드는 "{color} {name}이(가) 아름답게 피었습니다!"를 반환합니다. "장미", "빨간색" 꽃과 "튤립", "노란색" 꽃 두 송이를 만들고 각각의 개화 메시지를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[빨간색 장미이(가) 아름답게 피었습니다!
노란색 튤립이(가) 아름답게 피었습니다!]]></output>
    <hint><![CDATA[꽃의 이름과 색상을 저장하고, bloom_message에서 개화를 알리는 메시지를 반환하세요.]]></hint>
    <solution><![CDATA[class Flower:
    def __init__(self, name, color):
        self.name = name
        self.color = color
    
    def bloom_message(self):
        return f"{self.color} {self.name}이(가) 아름답게 피었습니다!"

flower1 = Flower("장미", "빨간색")
flower2 = Flower("튤립", "노란색")

print(flower1.bloom_message())
print(flower2.bloom_message())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Guitar 클래스를 만들고, brand, type, strings 속성을 가지도록 하세요. play_sound() 메서드는 "{strings}줄 {type} {brand} 기타 소리: 띵~"을 반환합니다. "펜더", "일렉트릭", 6 기타와 "야마하", "어쿠스틱", 6 기타 두 개를 만들고 각각의 연주 소리를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[6줄 일렉트릭 펜더 기타 소리: 띵~
6줄 어쿠스틱 야마하 기타 소리: 띵~]]></output>
    <hint><![CDATA[세 개의 속성을 저장하고, play_sound에서 기타 정보와 함께 소리를 표현한 문자열을 반환하세요.]]></hint>
    <solution><![CDATA[class Guitar:
    def __init__(self, brand, type, strings):
        self.brand = brand
        self.type = type
        self.strings = strings
    
    def play_sound(self):
        return f"{self.strings}줄 {self.type} {self.brand} 기타 소리: 띵~"

guitar1 = Guitar("펜더", "일렉트릭", 6)
guitar2 = Guitar("야마하", "어쿠스틱", 6)

print(guitar1.play_sound())
print(guitar2.play_sound())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Clock 클래스를 만들고, time 속성을 가지도록 하세요. tell_time() 메서드는 "현재 시각은 {time}입니다."를 반환합니다. "오전 9:30" 시계와 "오후 3:45" 시계 두 개를 만들고 각각의 시간을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[현재 시각은 오전 9:30입니다.
현재 시각은 오후 3:45입니다.]]></output>
    <hint><![CDATA[하나의 속성 time만 저장하고, tell_time에서 현재 시각을 알려주는 메시지를 반환하세요.]]></hint>
    <solution><![CDATA[class Clock:
    def __init__(self, time):
        self.time = time
    
    def tell_time(self):
        return f"현재 시각은 {self.time}입니다."

clock1 = Clock("오전 9:30")
clock2 = Clock("오후 3:45")

print(clock1.tell_time())
print(clock2.tell_time())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Backpack 클래스를 만들고, brand, color, capacity 속성을 가지도록 하세요. show_contents() 메서드는 "{color} {brand} 가방 (용량: {capacity}L)"을 반환합니다. "나이키", "검은색", 25 가방과 "아디다스", "파란색", 30 가방 두 개를 만들고 각각의 내용을 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[검은색 나이키 가방 (용량: 25L)
파란색 아디다스 가방 (용량: 30L)]]></output>
    <hint><![CDATA[세 개의 속성을 저장하고, show_contents에서 가방의 브랜드, 색상, 용량 정보를 반환하세요.]]></hint>
    <solution><![CDATA[class Backpack:
    def __init__(self, brand, color, capacity):
        self.brand = brand
        self.color = color
        self.capacity = capacity
    
    def show_contents(self):
        return f"{self.color} {self.brand} 가방 (용량: {self.capacity}L)"

backpack1 = Backpack("나이키", "검은색", 25)
backpack2 = Backpack("아디다스", "파란색", 30)

print(backpack1.show_contents())
print(backpack2.show_contents())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Weather 클래스를 만들고, condition과 temperature 속성을 가지도록 하세요. forecast() 메서드는 "오늘 날씨: {condition}, 기온: {temperature}도"를 반환합니다. "맑음", 25 날씨와 "흐림", 18 날씨 두 개를 만들고 각각의 일기예보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[오늘 날씨: 맑음, 기온: 25도
오늘 날씨: 흐림, 기온: 18도]]></output>
    <hint><![CDATA[날씨 상태와 기온을 저장하고, forecast에서 일기예보 정보를 반환하세요.]]></hint>
    <solution><![CDATA[class Weather:
    def __init__(self, condition, temperature):
        self.condition = condition
        self.temperature = temperature
    
    def forecast(self):
        return f"오늘 날씨: {self.condition}, 기온: {self.temperature}도"

weather1 = Weather("맑음", 25)
weather2 = Weather("흐림", 18)

print(weather1.forecast())
print(weather2.forecast())]]></solution>
  </problem>

  <problem>
    <description><![CDATA[Robot 클래스를 만들고, name, model, battery, status 속성을 가지도록 하세요. execute_task() 메서드는 "{name} 로봇 ({model}) - 배터리: {battery}%, 상태: {status}"를 반환합니다. "알파", "RX-100", 85, "대기중" 로봇과 "베타", "TX-200", 92, "작업중" 로봇 두 개를 만들고 각각의 작업 실행 정보를 출력하세요.]]></description>
    <code><![CDATA[]]></code>
    <input><![CDATA[]]></input>
    <output><![CDATA[알파 로봇 (RX-100) - 배터리: 85%, 상태: 대기중
베타 로봇 (TX-200) - 배터리: 92%, 상태: 작업중]]></output>
    <hint><![CDATA[네 개의 속성을 모두 저장하고, execute_task에서 로봇의 모든 상태 정보를 반환하세요.]]></hint>
    <solution><![CDATA[class Robot:
    def __init__(self, name, model, battery, status):
        self.name = name
        self.model = model
        self.battery = battery
        self.status = status
    
    def execute_task(self):
        return f"{self.name} 로봇 ({self.model}) - 배터리: {self.battery}%, 상태: {self.status}"

robot1 = Robot("알파", "RX-100", 85, "대기중")
robot2 = Robot("베타", "TX-200", 92, "작업중")

print(robot1.execute_task())
print(robot2.execute_task())]]></solution>
  </problem>
</problems>