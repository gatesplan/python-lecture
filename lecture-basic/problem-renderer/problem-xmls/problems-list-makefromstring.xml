<?xml version="1.0" encoding="UTF-8"?>
<!--
  문자열을 리스트로 변환 문제
  - list() 함수로 문자 단위 분할
  - split() 메서드로 단어/구분자 단위 분할
  - 문자열 메서드(upper, lower, strip 등)와 조합하여 복습
-->
<problems>
  <problem>
    <description>문자열 "hello"를 list() 함수를 사용하여 문자 리스트로 변환하고 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['h', 'e', 'l', 'l', 'o']]]></output>
    <hint>list("문자열")을 사용하면 각 문자가 리스트의 요소가 됩니다.</hint>
    <solution><![CDATA[text = "hello"
char_list = list(text)
print(char_list)]]></solution>
  </problem>

  <problem>
    <description>문자열 "apple banana orange"를 split() 메서드를 사용하여 단어 리스트로 변환하고 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['apple', 'banana', 'orange']]]></output>
    <hint>문자열.split()을 사용하면 공백을 기준으로 분할됩니다.</hint>
    <solution><![CDATA[text = "apple banana orange"
word_list = text.split()
print(word_list)]]></solution>
  </problem>

  <problem>
    <description>문자열 "python"을 list() 함수로 변환한 후 f-string으로 "글자들: [리스트]" 형태로 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[글자들: ['p', 'y', 't', 'h', 'o', 'n']]]></output>
    <hint>list() 함수 사용 후 f"글자들: {변수명}"을 사용하세요.</hint>
    <solution><![CDATA[text = "python"
letters = list(text)
print(f"글자들: {letters}")]]></solution>
  </problem>

  <problem>
    <description>문자열 "red,blue,green"을 콤마를 기준으로 split()하여 분할하고 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['red', 'blue', 'green']]]></output>
    <hint>split(",")을 사용하여 콤마를 기준으로 분할할 수 있습니다.</hint>
    <solution><![CDATA[colors = "red,blue,green"
color_list = colors.split(",")
print(color_list)]]></solution>
  </problem>

  <problem>
    <description>문자열 "Hello World"를 대문자로 변환한 후 list() 함수로 문자 리스트를 만들어 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D']]]></output>
    <hint>문자열.upper()를 먼저 적용한 후 list() 함수를 사용하세요.</hint>
    <solution><![CDATA[text = "Hello World"
upper_chars = list(text.upper())
print(upper_chars)]]></solution>
  </problem>

  <problem>
    <description>문자열 "사과 바나나 오렌지"를 split()으로 분할한 후 format() 메서드로 "과일: [리스트]" 형태로 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[과일: ['사과', '바나나', '오렌지']]]></output>
    <hint>split() 후 "과일: {}".format(변수명)을 사용하세요.</hint>
    <solution><![CDATA[fruits = "사과 바나나 오렌지"
fruit_list = fruits.split()
print("과일: {}".format(fruit_list))]]></solution>
  </problem>

  <problem>
    <description>문자열 " a, b, c "의 양쪽 공백을 제거한 후 콤마와 공백을 기준으로 split()하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['a', 'b', 'c']]]></output>
    <hint>strip()으로 공백을 제거한 후 split(", ")을 사용하세요.</hint>
    <solution><![CDATA[text = " a, b, c "
clean_list = text.strip().split(", ")
print(clean_list)]]></solution>
  </problem>

  <problem>
    <description>문자열 "ABC"를 소문자로 변환한 후 list()로 문자 리스트를 만들고 첫 번째 문자만 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[a]]></output>
    <hint>문자열.lower()를 적용한 후 list()로 변환하고 [0]으로 접근하세요.</hint>
    <solution><![CDATA[text = "ABC"
lower_chars = list(text.lower())
print(lower_chars[0])]]></solution>
  </problem>

  <problem>
    <description>문자열 "dog|cat|bird"를 파이프(|)를 기준으로 분할하고 두 번째 동물을 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[cat]]></output>
    <hint>split("|")로 분할한 후 [1]로 두 번째 요소에 접근하세요.</hint>
    <solution><![CDATA[animals = "dog|cat|bird"
animal_list = animals.split("|")
print(animal_list[1])]]></solution>
  </problem>

  <problem>
    <description>문자열 "123"을 list() 함수로 변환한 후 각 숫자를 sep="-"로 구분하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[1-2-3]]></output>
    <hint>list()로 변환한 후 print(리스트[0], 리스트[1], 리스트[2], sep="-")를 사용하세요.</hint>
    <solution><![CDATA[numbers = "123"
digit_list = list(numbers)
print(digit_list[0], digit_list[1], digit_list[2], sep="-")]]></solution>
  </problem>

  <problem>
    <description>문자열 "one two three"를 split()으로 분할하고 f-string을 사용하여 "첫번째: {첫번째}, 마지막: {마지막}" 형태로 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[첫번째: one, 마지막: three]]></output>
    <hint>split() 후 f"첫번째: {리스트[0]}, 마지막: {리스트[-1]}"을 사용하세요.</hint>
    <solution><![CDATA[words = "one two three"
word_list = words.split()
print(f"첫번째: {word_list[0]}, 마지막: {word_list[-1]}")]]></solution>
  </problem>

  <problem>
    <description>문자열 "  hello world  "의 양쪽 공백을 제거하고 대문자로 변환한 후 split()으로 분할하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[['HELLO', 'WORLD']]]></output>
    <hint>strip().upper().split() 순서로 메서드를 연결하세요.</hint>
    <solution><![CDATA[text = "  hello world  "
words = text.strip().upper().split()
print(words)]]></solution>
  </problem>

  <problem>
    <description>문자열 "Python Programming"을 list()로 변환하고 공백이 있는 위치(인덱스)의 문자를 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[ ]]></output>
    <hint>list()로 변환한 후 공백 ' '이 있는 인덱스를 찾아 출력하세요. 'Python Programming'에서 공백은 6번 인덱스입니다.</hint>
    <solution><![CDATA[text = "Python Programming"
char_list = list(text)
print(char_list[6])]]></solution>
  </problem>

  <problem>
    <description>문자열 "monday-tuesday-wednesday"를 하이픈으로 분할하고 첫 번째 요일의 첫 글자를 대문자로 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[M]]></output>
    <hint>split("-")으로 분할한 후 첫 번째 요소[0]의 첫 글자[0]을 upper()로 대문자화하세요.</hint>
    <solution><![CDATA[days = "monday-tuesday-wednesday"
day_list = days.split("-")
print(day_list[0][0].upper())]]></solution>
  </problem>

  <problem>
    <description>문자열 "a b c d e"를 split()으로 분할하고 홀수 번째 위치(1번, 3번)의 문자들을 sep=":"로 연결하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[b:d]]></output>
    <hint>split() 후 print(리스트[1], 리스트[3], sep=":")를 사용하세요.</hint>
    <solution><![CDATA[letters = "a b c d e"
letter_list = letters.split()
print(letter_list[1], letter_list[3], sep=":")]]></solution>
  </problem>

  <problem>
    <description>문자열 "HELLO"를 소문자로 변환하고 list()로 문자 리스트를 만든 후 마지막 두 글자를 연결하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[lo]]></output>
    <hint>lower()와 list() 적용 후 마지막 두 요소 [-2]와 [-1]을 더해서 연결하세요.</hint>
    <solution><![CDATA[text = "HELLO"
lower_list = list(text.lower())
print(lower_list[-2] + lower_list[-1])]]></solution>
  </problem>

  <problem>
    <description>문자열 "name:age:city"를 콜론으로 분할하고 각 항목을 "항목1, 항목2, 항목3" 형태로 format() 메서드를 사용하여 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[name, age, city]]></output>
    <hint>split(":")한 후 "{}, {}, {}".format(리스트[0], 리스트[1], 리스트[2])를 사용하세요.</hint>
    <solution><![CDATA[info = "name:age:city"
info_list = info.split(":")
print("{}, {}, {}".format(info_list[0], info_list[1], info_list[2]))]]></solution>
  </problem>

  <problem>
    <description>문자열 "programming"을 list()로 변환하고 첫 글자, 중간 글자(5번 인덱스), 마지막 글자를 f-string으로 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[첫글자: p, 중간글자: r, 마지막글자: g]]></output>
    <hint>list() 변환 후 f"첫글자: {리스트[0]}, 중간글자: {리스트[5]}, 마지막글자: {리스트[-1]}"을 사용하세요.</hint>
    <solution><![CDATA[word = "programming"
char_list = list(word)
print(f"첫글자: {char_list[0]}, 중간글자: {char_list[5]}, 마지막글자: {char_list[-1]}")]]></solution>
  </problem>

  <problem>
    <description>문자열 " CAT DOG BIRD "를 정리(strip)하고 소문자로 변환한 후 split()하여 두 번째 동물의 길이를 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[3]]></output>
    <hint>strip().lower().split() 순서로 적용한 후 두 번째 요소[1]에 len()을 적용하세요.</hint>
    <solution><![CDATA[animals = " CAT DOG BIRD "
animal_list = animals.strip().lower().split()
print(len(animal_list[1]))]]></solution>
  </problem>

  <problem>
    <description>문자열 "x-y-z"를 하이픈으로 분할하고 각 문자를 대문자로 변환하여 end=" "로 한 줄에 출력하세요.</description>
    <code></code>
    <input></input>
    <output><![CDATA[X Y Z ]]></output>
    <hint>split("-") 후 각 요소를 upper()하여 print(요소, end=" ")로 출력하세요.</hint>
    <solution><![CDATA[letters = "x-y-z"
letter_list = letters.split("-")
print(letter_list[0].upper(), end=" ")
print(letter_list[1].upper(), end=" ")
print(letter_list[2].upper(), end=" ")]]></solution>
  </problem>
</problems>