<?xml version="1.0" encoding="UTF-8"?>
<!--
  재귀함수를 제어문으로 변환 연습 - 2025.1.21 생성
  
  이 파일은 재귀함수로 구현된 코드를 제어문(for, while, if)만 사용하여 
  하나의 함수로 변환하는 연습 문제들을 포함합니다.
  
  학습 목표:
  - 재귀함수의 동작 원리를 제어문으로 이해하기
  - 반복문과 조건문을 활용한 알고리즘 구현
  - 재귀적 사고를 반복적 사고로 전환하기
-->
<problems>

  <!-- 1. n개 문자 출력 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def print_char_n_times_recursive(char, n):
    if n <= 0:
        return
    print(char, end='')
    print_char_n_times_recursive(char, n - 1)

# 제어문으로 변환하여 구현하세요
def print_char_n_times(char, n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_char_n_times('*', 5)  # ***** 가 출력되어야 합니다]]></code>
    <input><![CDATA[char='*', n=5]]></input>
    <output><![CDATA[*****]]></output>
    <solution><![CDATA[def print_char_n_times(char, n):
    for i in range(n):
        print(char, end='')]]></solution>
  </problem>

  <!-- 2. 1부터 n까지 한 줄씩 출력 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def print_1_to_n_recursive(n):
    if n <= 0:
        return
    print_1_to_n_recursive(n - 1)
    print(n)

# 제어문으로 변환하여 구현하세요
def print_1_to_n(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print_1_to_n(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[1
2
3
4
5]]></output>
    <solution><![CDATA[def print_1_to_n(n):
    for i in range(1, n + 1):
        print(i)]]></solution>
  </problem>

  <!-- 3. 별 삼각형 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def star_triangle_recursive(n, current=1):
    if current > n:
        return
    print('*' * current)
    star_triangle_recursive(n, current + 1)

# 제어문으로 변환하여 구현하세요
def star_triangle(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
star_triangle(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[*
**
***
****
*****]]></output>
    <solution><![CDATA[def star_triangle(n):
    for i in range(1, n + 1):
        print('*' * i)]]></solution>
  </problem>

  <!-- 4. 역별 삼각형 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def reverse_star_triangle_recursive(n):
    if n <= 0:
        return
    print('*' * n)
    reverse_star_triangle_recursive(n - 1)

# 제어문으로 변환하여 구현하세요
def reverse_star_triangle(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
reverse_star_triangle(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[*****
****
***
**
*]]></output>
    <solution><![CDATA[def reverse_star_triangle(n):
    for i in range(n, 0, -1):
        print('*' * i)]]></solution>
  </problem>

  <!-- 5. 숫자 삼각형 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def number_triangle_recursive(n):
    if n <= 0:
        return
    number_triangle_recursive(n - 1)
    print(str(n) * n)

# 제어문으로 변환하여 구현하세요
def number_triangle(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
number_triangle(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[1
22
333
4444
55555]]></output>
    <solution><![CDATA[def number_triangle(n):
    for i in range(1, n + 1):
        print(str(i) * i)]]></solution>
  </problem>

  <!-- 6. 숫자 역삼각형 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def reverse_number_triangle_recursive(n):
    if n <= 0:
        return
    print(str(n) * n)
    reverse_number_triangle_recursive(n - 1)

# 제어문으로 변환하여 구현하세요
def reverse_number_triangle(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
reverse_number_triangle(5)]]></code>
    <input><![CDATA[5]]></input>
    <output><![CDATA[55555
4444
333
22
1]]></output>
    <solution><![CDATA[def reverse_number_triangle(n):
    for i in range(n, 0, -1):
        print(str(i) * i)]]></solution>
  </problem>

  <!-- 7. 최대공약수 (유클리드 호제법) -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def gcd_recursive(a, b):
    if b == 0:
        return a
    return gcd_recursive(b, a % b)

# 제어문으로 변환하여 구현하세요
def gcd(a, b):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(f"gcd(48, 18) = {gcd(48, 18)}")   # 6이 나와야 합니다
print(f"gcd(56, 42) = {gcd(56, 42)}")   # 14가 나와야 합니다]]></code>
    <input><![CDATA[a=48, b=18]]></input>
    <output><![CDATA[6]]></output>
    <solution><![CDATA[def gcd(a, b):
    while b != 0:
        temp = b
        b = a % b
        a = temp
    return a]]></solution>
  </problem>

  <!-- 8. 최소공배수 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현 (gcd 함수 포함)
def gcd_recursive(a, b):
    if b == 0:
        return a
    return gcd_recursive(b, a % b)

def lcm_recursive(a, b):
    return (a * b) // gcd_recursive(a, b)

# 제어문으로 변환하여 구현하세요
def lcm(a, b):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(f"lcm(12, 18) = {lcm(12, 18)}")   # 36이 나와야 합니다
print(f"lcm(15, 25) = {lcm(15, 25)}")   # 75가 나와야 합니다]]></code>
    <input><![CDATA[a=12, b=18]]></input>
    <output><![CDATA[36]]></output>
    <solution><![CDATA[def lcm(a, b):
    # gcd 계산을 위한 임시 변수
    temp_a, temp_b = a, b
    while temp_b != 0:
        temp_a, temp_b = temp_b, temp_a % temp_b
    gcd_result = temp_a
    
    return (a * b) // gcd_result]]></solution>
  </problem>

  <!-- 9. 10진수를 2진수로 변환 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def decimal_to_binary_recursive(n):
    if n == 0:
        return "0"
    if n == 1:
        return "1"
    return decimal_to_binary_recursive(n // 2) + str(n % 2)

# 제어문으로 변환하여 구현하세요
def decimal_to_binary(n):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(f"decimal_to_binary(10) = {decimal_to_binary(10)}")  # "1010"
print(f"decimal_to_binary(7) = {decimal_to_binary(7)}")    # "111"]]></code>
    <input><![CDATA[10]]></input>
    <output><![CDATA[1010]]></output>
    <solution><![CDATA[def decimal_to_binary(n):
    if n == 0:
        return "0"
    
    result = ""
    while n > 0:
        result = str(n % 2) + result  # 앞에 추가
        n = n // 2
    return result]]></solution>
  </problem>

  <!-- 10. 10진수를 n진수로 변환 -->
  <problem>
    <description><![CDATA[다음 재귀함수를 제어문만 사용하여 하나의 함수로 구현하세요.]]></description>
    <code><![CDATA[# 재귀함수 구현
def decimal_to_base_recursive(n, base):
    if n == 0:
        return "0"
    if n < base:
        if n < 10:
            return str(n)
        else:
            return chr(ord('A') + n - 10)
    
    remainder = n % base
    if remainder < 10:
        remainder_char = str(remainder)
    else:
        remainder_char = chr(ord('A') + remainder - 10)
    
    return decimal_to_base_recursive(n // base, base) + remainder_char

# 제어문으로 변환하여 구현하세요
def decimal_to_base(n, base):
    # 여기에 코드를 작성하세요
    pass

# 테스트
print(f"decimal_to_base(255, 16) = {decimal_to_base(255, 16)}")  # "FF"
print(f"decimal_to_base(100, 8) = {decimal_to_base(100, 8)}")   # "144"]]></code>
    <input><![CDATA[n=255, base=16]]></input>
    <output><![CDATA[FF]]></output>
    <solution><![CDATA[def decimal_to_base(n, base):
    if n == 0:
        return "0"
    
    result = ""
    while n > 0:
        remainder = n % base
        if remainder < 10:
            result = str(remainder) + result
        else:
            result = chr(ord('A') + remainder - 10) + result
        n = n // base
    return result]]></solution>
  </problem>

</problems>